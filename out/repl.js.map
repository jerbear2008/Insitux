{"version":3,"file":"repl.js","mappings":";;;;;;;;AAAa;;AAEb;AACA;AACA;AACA,EAAE;;AAEF;AACA,4BAA4B,4BAA4B;AACxD,aAAa,IAAI,IAAI,IAAI,IAAI;AAC7B;;AAEA;AACA;;;;;;;;ACbY;;AAEZ,SAAS,mBAAO,CAAC,GAAI;AACrB,gBAAgB,mBAAO,CAAC,CAAY;AACpC,eAAe;;AAEf;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB,oBAAoB,aAAa,UAAU,OAAO;AAClD,eAAe,QAAQ;AACvB;AACA,aAAa,UAAU;AACvB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,+BAA+B;AAC/B,iCAAiC,oBAAoB,SAAS;;AAE9D;;;AAGA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,gBAAgB,QAAQ;AACxB;AACA,eAAe,QAAQ;AACvB,aAAa,QAAQ;AACrB,sBAAsB,aAAa,UAAU,OAAO;AACpD;AACA;AACA,eAAe,QAAQ;AACvB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB;;AAEnB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA,UAAU;AACV;AACA;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","sources":["webpack://insitux/./node_modules/ansi-regex/index.js","webpack://insitux/./node_modules/prompt-sync/index.js","webpack://insitux/./node_modules/strip-ansi/index.js","webpack://insitux/external node-commonjs \"fs\"","webpack://insitux/external node-commonjs \"readline\"","webpack://insitux/webpack/bootstrap","webpack://insitux/webpack/runtime/define property getters","webpack://insitux/webpack/runtime/hasOwnProperty shorthand","webpack://insitux/webpack/runtime/make namespace object","webpack://insitux/./src/poly-fills.ts","webpack://insitux/./src/types.ts","webpack://insitux/./src/checks.ts","webpack://insitux/./src/closure.ts","webpack://insitux/./src/parse.ts","webpack://insitux/./src/test.ts","webpack://insitux/./src/val.ts","webpack://insitux/./src/index.ts","webpack://insitux/./src/invoker.ts","webpack://insitux/external node-commonjs \"process\"","webpack://insitux/./src/repl.ts"],"sourcesContent":["'use strict';\n\nmodule.exports = options => {\n\toptions = Object.assign({\n\t\tonlyFirst: false\n\t}, options);\n\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, options.onlyFirst ? undefined : 'g');\n};\n","'use strict'\n\nvar fs = require('fs');\nvar stripAnsi = require('strip-ansi');\nvar term = 13; // carriage return\n\n/**\n * create -- sync function for reading user input from stdin\n * @param   {Object} config {\n *   sigint: {Boolean} exit on ^C\n *   autocomplete: {StringArray} function({String})\n *   history: {String} a history control object (see `prompt-sync-history`)\n * }\n * @returns {Function} prompt function\n */\n\n // for ANSI escape codes reference see https://en.wikipedia.org/wiki/ANSI_escape_code\n\nfunction create(config) {\n\n  config = config || {};\n  var sigint = config.sigint;\n  var eot = config.eot;\n  var autocomplete = config.autocomplete =\n    config.autocomplete || function(){return []};\n  var history = config.history;\n  prompt.history = history || {save: function(){}};\n  prompt.hide = function (ask) { return prompt(ask, {echo: ''}) };\n\n  return prompt;\n\n\n  /**\n   * prompt -- sync function for reading user input from stdin\n   *  @param {String} ask opening question/statement to prompt for\n   *  @param {String} value initial value for the prompt\n   *  @param   {Object} opts {\n   *   echo: set to a character to be echoed, default is '*'. Use '' for no echo\n   *   value: {String} initial value for the prompt\n   *   ask: {String} opening question/statement to prompt for, does not override ask param\n   *   autocomplete: {StringArray} function({String})\n   * }\n   *\n   * @returns {string} Returns the string input or (if sigint === false)\n   *                   null if user terminates with a ^C\n   */\n\n\n  function prompt(ask, value, opts) {\n    var insert = 0, savedinsert = 0, res, i, savedstr;\n    opts = opts || {};\n\n    if (Object(ask) === ask) {\n      opts = ask;\n      ask = opts.ask;\n    } else if (Object(value) === value) {\n      opts = value;\n      value = opts.value;\n    }\n    ask = ask || '';\n    var echo = opts.echo;\n    var masked = 'echo' in opts;\n    autocomplete = opts.autocomplete || autocomplete;\n\n    var fd = (process.platform === 'win32') ?\n      process.stdin.fd :\n      fs.openSync('/dev/tty', 'rs');\n\n    var wasRaw = process.stdin.isRaw;\n    if (!wasRaw) { process.stdin.setRawMode && process.stdin.setRawMode(true); }\n\n    var buf = Buffer.alloc(3);\n    var str = '', character, read;\n\n    savedstr = '';\n\n    if (ask) {\n      process.stdout.write(ask);\n    }\n\n    var cycle = 0;\n    var prevComplete;\n\n    while (true) {\n      read = fs.readSync(fd, buf, 0, 3);\n      if (read > 1) { // received a control sequence\n        switch(buf.toString()) {\n          case '\\u001b[A':  //up arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.atStart()) break;\n\n            if (history.atEnd()) {\n              savedstr = str;\n              savedinsert = insert;\n            }\n            str = history.prev();\n            insert = str.length;\n            process.stdout.write('\\u001b[2K\\u001b[0G' + ask + str);\n            break;\n          case '\\u001b[B':  //down arrow\n            if (masked) break;\n            if (!history) break;\n            if (history.pastEnd()) break;\n\n            if (history.atPenultimate()) {\n              str = savedstr;\n              insert = savedinsert;\n              history.next();\n            } else {\n              str = history.next();\n              insert = str.length;\n            }\n            process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str + '\\u001b['+(insert+ask.length+1)+'G');\n            break;\n          case '\\u001b[D': //left arrow\n            if (masked) break;\n            var before = insert;\n            insert = (--insert < 0) ? 0 : insert;\n            if (before - insert)\n              process.stdout.write('\\u001b[1D');\n            break;\n          case '\\u001b[C': //right arrow\n            if (masked) break;\n            insert = (++insert > str.length) ? str.length : insert;\n            process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n            break;\n          default:\n            if (buf.toString()) {\n              str = str + buf.toString();\n              str = str.replace(/\\0/g, '');\n              insert = str.length;\n              promptPrint(masked, ask, echo, str, insert);\n              process.stdout.write('\\u001b[' + (insert+ask.length+1) + 'G');\n              buf = Buffer.alloc(3);\n            }\n        }\n        continue; // any other 3 character sequence is ignored\n      }\n\n      // if it is not a control character seq, assume only one character is read\n      character = buf[read-1];\n\n      // catch a ^C and return null\n      if (character == 3){\n        process.stdout.write('^C\\n');\n        fs.closeSync(fd);\n\n        if (sigint) process.exit(130);\n\n        process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n        return null;\n      }\n\n      // catch a ^D and exit\n      if (character == 4) {\n        if (str.length == 0 && eot) {\n          process.stdout.write('exit\\n');\n          process.exit(0);\n        }\n      }\n\n      // catch the terminating character\n      if (character == term) {\n        fs.closeSync(fd);\n        if (!history) break;\n        if (!masked && str.length) history.push(str);\n        history.reset();\n        break;\n      }\n\n      // catch a TAB and implement autocomplete\n      if (character == 9) { // TAB\n        res = autocomplete(str);\n\n        if (str == res[0]) {\n          res = autocomplete('');\n        } else {\n          prevComplete = res.length;\n        }\n\n        if (res.length == 0) {\n          process.stdout.write('\\t');\n          continue;\n        }\n\n        var item = res[cycle++] || res[cycle = 0, cycle++];\n\n        if (item) {\n          process.stdout.write('\\r\\u001b[K' + ask + item);\n          str = item;\n          insert = item.length;\n        }\n      }\n\n      if (character == 127 || (process.platform == 'win32' && character == 8)) { //backspace\n        if (!insert) continue;\n        str = str.slice(0, insert-1) + str.slice(insert);\n        insert--;\n        process.stdout.write('\\u001b[2D');\n      } else {\n        if ((character < 32 ) || (character > 126))\n            continue;\n        str = str.slice(0, insert) + String.fromCharCode(character) + str.slice(insert);\n        insert++;\n      };\n\n      promptPrint(masked, ask, echo, str, insert);\n\n    }\n\n    process.stdout.write('\\n')\n\n    process.stdin.setRawMode && process.stdin.setRawMode(wasRaw);\n\n    return str || value || '';\n  };\n\n\n  function promptPrint(masked, ask, echo, str, insert) {\n    if (masked) {\n        process.stdout.write('\\u001b[2K\\u001b[0G' + ask + Array(str.length+1).join(echo));\n    } else {\n      process.stdout.write('\\u001b[s');\n      if (insert == str.length) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n      } else {\n        if (ask) {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ ask + str);\n        } else {\n          process.stdout.write('\\u001b[2K\\u001b[0G'+ str + '\\u001b[' + (str.length - insert) + 'D');\n        }\n      }\n\n      // Reposition the cursor to the right of the insertion point\n      var askLength = stripAnsi(ask).length;\n      process.stdout.write(`\\u001b[${askLength+1+(echo==''? 0:insert)}G`);\n    }\n  }\n};\n\nmodule.exports = create;\n","'use strict';\nconst ansiRegex = require('ansi-regex');\n\nconst stripAnsi = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n\nmodule.exports = stripAnsi;\nmodule.exports.default = stripAnsi;\n","module.exports = require(\"fs\");","module.exports = require(\"readline\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const toNum = (x: unknown): number => Number(x); //Should also support 0b and 0x\r\nexport const slice = <T>(arr: T[], start?: number, end?: number): T[] =>\r\n  arr.slice(start, end);\r\nexport const splice = <T>(arr: T[], start: number, numDel?: number): T[] =>\r\n  arr.splice(start, numDel);\r\nexport const len = <T>(arr: T[]): number => arr.length;\r\nexport const slen = (str: string): number => str.length;\r\nexport const isNum = (x: unknown): x is number =>\r\n  x !== \"\" && !Number.isNaN(Number(x));\r\nexport const isArray = <T>(x: unknown): x is T[] => Array.isArray(x);\r\nexport const substr = (str: string, start: number, length?: number): string =>\r\n  str.substring(start, start + (length ?? str.length));\r\nexport const strIdx = (str: string, idx: number): string => str[idx];\r\nexport const sub = (x: string, s: string): boolean => x.includes(s);\r\nexport const subIdx = (x: string, s: string) => x.indexOf(s);\r\nexport const has = <T>(x: T[], y: T): boolean => x.includes(y);\r\nexport const starts = (str: string, prefix: string): boolean =>\r\n  str.startsWith(prefix);\r\nexport const ends = (str: string, x: string): boolean => str.endsWith(x);\r\nexport const replace = (str: string, what: string, to: string): string =>\r\n  str.replace(new RegExp(what, \"g\"), to);\r\nexport const flat = <T>(arr: T[][]): T[] => arr.flat(); //e.g. [[0], [1], []] => [0, 1]\r\nexport const concat = <T>(a: T[], b: T[]): T[] => a.concat(b);\r\nexport const push = <T>(arr: T[], add: T[]) => arr.push(...add);\r\nexport const sortBy = <T>(arr: T[], by: (a: T, b: T) => number) => arr.sort(by);\r\nexport const reverse = <T>(arr: T[]) => arr.reverse();\r\nexport const lowerCase = (str: string) => str.toLowerCase();\r\nexport const upperCase = (str: string) => str.toUpperCase();\r\nexport const trim = (str: string) => str.trim();\r\nexport const trimStart = (str: string) => str.trimStart();\r\nexport const trimEnd = (str: string) => str.trimEnd();\r\nexport const padEnd = (str: string, by: number) => str.padEnd(by);\r\nexport const charCode = (str: string): number => str.charCodeAt(0);\r\nexport const codeChar = (num: number): string => String.fromCharCode(num);\r\nexport const randNum = (a: number, b: number) => a + Math.random() * (b - a);\r\nexport const randInt = (a: number, b: number) => Math.floor(randNum(a, b));\r\nexport const range = (len: number) => [...Array(len).keys()];\r\nexport const objKeys = (x: object) => Object.keys(x);\r\nexport const getTimeMs = () => new Date().getTime();\r\nexport const abs = Math.abs;\r\nexport const min = Math.min;\r\nexport const max = Math.max;\r\nexport const sin = Math.sin;\r\nexport const cos = Math.cos;\r\nexport const tan = Math.tan;\r\nexport const sinh = Math.sinh;\r\nexport const cosh = Math.cosh;\r\nexport const tanh = Math.tanh;\r\nexport const asin = Math.asin;\r\nexport const acos = Math.acos;\r\nexport const atan = Math.atan;\r\nexport const sqrt = Math.sqrt;\r\nexport const round = Math.round;\r\nexport const floor = Math.floor;\r\nexport const ceil = Math.ceil;\r\nexport const sign = Math.sign;\r\nexport const logn = Math.log;\r\nexport const log2 = Math.log2;\r\nexport const log10 = Math.log10;\r\n","export type Val =\r\n  | { t: \"vec\"; v: Val[] }\r\n  | { t: \"str\" | \"func\" | \"key\" | \"ref\"; v: string }\r\n  | { t: \"null\"; v: undefined }\r\n  | { t: \"wild\"; v: undefined }\r\n  | { t: \"bool\"; v: boolean }\r\n  | { t: \"num\"; v: number }\r\n  | { t: \"clo\"; v: Func }\r\n  | { t: \"dict\"; v: Dict }\r\n  | { t: \"ext\"; v: unknown };\r\n\r\nexport type ErrCtx = { invokeId: string; line: number; col: number };\r\nexport type InvokeError = { e: string; m: string; errCtx: ErrCtx };\r\nexport type ValOrErr =\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"err\"; err: string };\r\n/**\r\n * @summary \"empty\" occurs when there was only function declaration;\r\n *          \"val\" occurs when there were no errors and there is a final value;\r\n *          \"errors\" occurs when there were any errors.\r\n */\r\nexport type InvokeResult =\r\n  | { kind: \"empty\" }\r\n  | { kind: \"val\"; value: Val }\r\n  | { kind: \"errors\"; errors: InvokeError[] };\r\n\r\nexport type Dict = {\r\n  keys: Val[];\r\n  vals: Val[];\r\n};\r\n\r\nexport type Func = {\r\n  name?: string;\r\n  ins: Ins[];\r\n};\r\nexport type Funcs = { [key: string]: Func };\r\nexport type Env = {\r\n  funcs: Funcs;\r\n  vars: { [key: string]: Val };\r\n};\r\n\r\n/** A context supplied with an Insitux invocation to provide its environment. */\r\nexport type Ctx = {\r\n  /** Called to set an external variable, returning nothing or an error. */\r\n  set: (key: string, val: Val) => undefined | string;\r\n  /** Called to retrieve an external variable,\r\n   * returning the value or an error. */\r\n  get: (key: string) => ValOrErr;\r\n  /** Called to print data out of Insitux. */\r\n  print: (str: string, withNewline: boolean) => void;\r\n  /** Extra function definitions to make available within this invocation */\r\n  functions: ExternalFunction[];\r\n  /** Called when Insitux cannot find a function definition otherwise.\r\n   * You should return an error if unknown externally too. */\r\n  exe: (name: string, args: Val[]) => ValOrErr;\r\n  /** Function and variable definitions, retained by you for each invocation. */\r\n  env: Env;\r\n  /** The number of loops an invocation is permitted. */\r\n  loopBudget: number;\r\n  /** The total length of all `range` calls permitted. */\r\n  rangeBudget: number;\r\n  /** The total number of function calls permitted. */\r\n  callBudget: number;\r\n  /** The total number of explicit recursions permitted.\r\n   * Explicit recursions are unlikely to cause a stack-overflow. */\r\n  recurBudget: number;\r\n};\r\n\r\nexport const defaultCtx = {\r\n  env: { funcs: {}, vars: {} },\r\n  loopBudget: 1e7,\r\n  rangeBudget: 1e6,\r\n  callBudget: 1e8,\r\n  recurBudget: 1e4,\r\n};\r\n\r\nexport type ParamsShape = { name: string; position: number[] }[];\r\nexport type Closure = {\r\n  readonly name: string;\r\n  readonly length: number;\r\n  readonly captures: boolean[];\r\n  readonly derefs: Ins[];\r\n};\r\n\r\nexport type Ins = { errCtx: ErrCtx } & (\r\n  | { typ: \"npa\" | \"upa\"; value: number; text: string } //Named and Unnamed parameters\r\n  | { typ: \"dpa\"; value: number[] } //Destructuring parameters\r\n  | { typ: \"var\" | \"let\" | \"ref\"; value: string }\r\n  | { typ: \"dva\" | \"dle\"; value: ParamsShape } //Destructuring var/let\r\n  | { typ: \"exe\"; value: number } //Execute last stack value, number of args\r\n  | { typ: \"exa\"; value: number } //Execute last stack value, number of args, with arity check\r\n  | { typ: \"or\" | \"if\" | \"jmp\" | \"loo\" | \"cat\" | \"mat\"; value: number } //Number of instructions\r\n  | { typ: \"ret\"; value: boolean } //Return, with value?\r\n  | { typ: \"pop\"; value: number } //Truncate stack, by number of values\r\n  | { typ: \"clo\"; value: Closure } //Closure/partial\r\n  | { typ: \"val\"; value: Val }\r\n);\r\n\r\n/** Definition of an operation in Insitux,\r\n * with guarantees made for arity (number of parameters) and parameter types.\r\n * Return type is specified to inform the parse-time type-checker. */\r\nexport type Operation = {\r\n  minArity?: number;\r\n  maxArity?: number;\r\n  exactArity?: number;\r\n  numeric?: true | \"in only\";\r\n  params?: (\"any\" | Val[\"t\"] | Val[\"t\"][])[];\r\n  returns?: Val[\"t\"][];\r\n};\r\nexport type ExternalHandler = (params: Val[]) => ValOrErr;\r\nexport type ExternalFunction = {\r\n  name: string;\r\n  definition: Operation;\r\n  handler: ExternalHandler;\r\n};\r\n\r\nexport const ops: {\r\n  [name: string]: Operation & { external?: boolean };\r\n} = {\r\n  print: { returns: [\"null\"] },\r\n  \"print-str\": { returns: [\"null\"] },\r\n  \"!\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"!=\": { minArity: 2, returns: [\"bool\"] },\r\n  \"+\": { minArity: 2, numeric: true },\r\n  \"-\": { minArity: 1, numeric: true },\r\n  \"*\": { minArity: 2, numeric: true },\r\n  \"/\": { minArity: 2, numeric: true },\r\n  \"//\": { minArity: 2, numeric: true },\r\n  \"**\": { minArity: 1, maxArity: 2, numeric: true },\r\n  \"<\": { minArity: 2, numeric: true },\r\n  \">\": { minArity: 2, numeric: true },\r\n  \"<=\": { minArity: 2, numeric: true },\r\n  \">=\": { minArity: 2, numeric: true },\r\n  \"fast=\": { exactArity: 2 },\r\n  \"fast!=\": { exactArity: 2 },\r\n  \"fast+\": { exactArity: 2, numeric: true },\r\n  \"fast-\": { exactArity: 2, numeric: true },\r\n  \"fast*\": { exactArity: 2, numeric: true },\r\n  \"fast/\": { exactArity: 2, numeric: true },\r\n  \"fast//\": { exactArity: 2, numeric: true },\r\n  \"fast<\": { exactArity: 2, numeric: true },\r\n  \"fast>\": { exactArity: 2, numeric: true },\r\n  \"fast<=\": { exactArity: 2, numeric: true },\r\n  \"fast>=\": { exactArity: 2, numeric: true },\r\n  inc: { exactArity: 1, numeric: true },\r\n  dec: { exactArity: 1, numeric: true },\r\n  min: { minArity: 2, numeric: true },\r\n  max: { minArity: 2, numeric: true },\r\n  abs: { exactArity: 1, numeric: true },\r\n  sqrt: { exactArity: 1, numeric: true },\r\n  round: { minArity: 1, maxArity: 2, numeric: true },\r\n  floor: { exactArity: 1, numeric: true },\r\n  ceil: { exactArity: 1, numeric: true },\r\n  logn: { exactArity: 1, numeric: true },\r\n  log2: { exactArity: 1, numeric: true },\r\n  log10: { exactArity: 1, numeric: true },\r\n  and: { minArity: 1 },\r\n  or: { minArity: 1 },\r\n  xor: { exactArity: 2 },\r\n  \"&\": { exactArity: 2, numeric: true },\r\n  \"|\": { exactArity: 2, numeric: true },\r\n  \"^\": { exactArity: 2, numeric: true },\r\n  \"~\": { exactArity: 1, numeric: true },\r\n  \"<<\": { exactArity: 2, numeric: true },\r\n  \">>\": { exactArity: 2, numeric: true },\r\n  \">>>\": { exactArity: 2, numeric: true },\r\n  \"odd?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"even?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"pos?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"neg?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"zero?\": { exactArity: 1, numeric: \"in only\", returns: [\"bool\"] },\r\n  \"null?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"num?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"bool?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"str?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"vec?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"dict?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"key?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"func?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"wild?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"ext?\": { exactArity: 1, returns: [\"bool\"] },\r\n  \"type-of\": { exactArity: 1, returns: [\"str\"] },\r\n  rem: { minArity: 2, numeric: true },\r\n  sin: { exactArity: 1, numeric: true },\r\n  cos: { exactArity: 1, numeric: true },\r\n  tan: { exactArity: 1, numeric: true },\r\n  asin: { exactArity: 1, numeric: true },\r\n  acos: { exactArity: 1, numeric: true },\r\n  atan: { exactArity: 1, numeric: true },\r\n  sinh: { exactArity: 1, numeric: true },\r\n  cosh: { exactArity: 1, numeric: true },\r\n  tanh: { exactArity: 1, numeric: true },\r\n  vec: { returns: [\"vec\"] },\r\n  dict: { returns: [\"dict\"] },\r\n  len: { exactArity: 1, params: [[\"str\", \"vec\", \"dict\"]], returns: [\"num\"] },\r\n  \"to-num\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"num\"]],\r\n    returns: [\"num\", \"null\"],\r\n  },\r\n  \"to-key\": { exactArity: 1, params: [[\"str\", \"num\"]], returns: [\"key\"] },\r\n  \"to-vec\": { exactArity: 1, params: [[\"str\", \"dict\"]], returns: [\"vec\"] },\r\n  \"substr?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  idx: {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"str\", \"vec\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  \"set-at\": {\r\n    exactArity: 3,\r\n    params: [\"vec\", \"any\", [\"vec\", \"dict\"]],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  map: { minArity: 2, returns: [\"vec\"] },\r\n  for: { minArity: 2, returns: [\"vec\"] },\r\n  reduce: { minArity: 2, maxArity: 3 },\r\n  filter: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  remove: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\", \"str\", \"dict\"],\r\n  },\r\n  find: { minArity: 2, params: [\"any\", [\"vec\", \"dict\", \"str\"]] },\r\n  count: {\r\n    minArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"num\"],\r\n  },\r\n  repeat: { minArity: 2, params: [\"any\", \"num\"] },\r\n  \"->\": { minArity: 2 },\r\n  str: { returns: [\"str\"] },\r\n  rand: { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \"rand-int\": { maxArity: 2, numeric: true, returns: [\"num\"] },\r\n  \".\": { minArity: 1 },\r\n  \"..\": { minArity: 2 },\r\n  \"...\": { minArity: 2 },\r\n  into: {\r\n    exactArity: 2,\r\n    params: [\r\n      [\"vec\", \"dict\"],\r\n      [\"vec\", \"dict\"],\r\n    ],\r\n    returns: [\"vec\", \"dict\"],\r\n  },\r\n  assoc: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  omit: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"dict\"],\r\n    returns: [\"dict\"],\r\n  },\r\n  insert: {\r\n    exactArity: 3,\r\n    params: [\"any\", \"num\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  append: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  prepend: {\r\n    exactArity: 2,\r\n    params: [\"any\", \"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sect: {\r\n    minArity: 1,\r\n    maxArity: 3,\r\n    params: [[\"vec\", \"str\"], \"num\", \"num\"],\r\n    returns: [\"vec\", \"str\"],\r\n  },\r\n  reverse: { exactArity: 1, params: [[\"vec\", \"str\"]], returns: [\"vec\", \"str\"] },\r\n  flatten: {\r\n    exactArity: 1,\r\n    params: [\"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  shuffle: {\r\n    exactArity: 1,\r\n    params: [\"vec\"],\r\n    returns: [\"vec\"],\r\n  },\r\n  sort: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  \"sort-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  distinct: {\r\n    returns: [\"vec\"],\r\n  },\r\n  \"group-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"dict\"],\r\n  },\r\n  \"part-by\": {\r\n    exactArity: 2,\r\n    params: [\"any\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"vec\"],\r\n  },\r\n  frequencies: {\r\n    exactArity: 1,\r\n    params: [[\"vec\", \"str\"]],\r\n    returns: [\"dict\"],\r\n  },\r\n  keys: { exactArity: 1, params: [\"dict\"] },\r\n  vals: { exactArity: 1, params: [\"dict\"] },\r\n  do: { minArity: 1 },\r\n  val: { minArity: 1 },\r\n  range: { minArity: 1, maxArity: 3, numeric: \"in only\", returns: [\"vec\"] },\r\n  \"empty?\": {\r\n    exactArity: 1,\r\n    params: [[\"str\", \"vec\", \"dict\"]],\r\n    returns: [\"bool\"],\r\n  },\r\n  split: { exactArity: 2, params: [\"str\", \"str\"], returns: [\"vec\"] },\r\n  join: {\r\n    exactArity: 2,\r\n    params: [\"str\", [\"vec\", \"dict\", \"str\"]],\r\n    returns: [\"str\"],\r\n  },\r\n  replace: {\r\n    exactArity: 3,\r\n    params: [\"str\", \"str\", \"str\"],\r\n    returns: [\"str\"],\r\n  },\r\n  \"starts?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"ends?\": { exactArity: 2, params: [\"str\", \"str\"], returns: [\"bool\"] },\r\n  \"lower-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"upper-case\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  trim: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-start\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"trim-end\": { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n  \"str*\": { exactArity: 2, params: [\"str\", \"num\"], returns: [\"str\"] },\r\n  \"char-code\": {\r\n    minArity: 1,\r\n    maxArity: 2,\r\n    params: [[\"str\", \"num\"], \"num\"],\r\n    returns: [\"str\", \"num\", \"null\"],\r\n  },\r\n  time: { exactArity: 0, returns: [\"num\"] },\r\n  version: { exactArity: 0, returns: [\"num\"] },\r\n  tests: { minArity: 0, maxArity: 1, params: [\"bool\"], returns: [\"str\"] },\r\n  symbols: { exactArity: 0, returns: [\"vec\"] },\r\n  eval: { exactArity: 1, params: [\"str\"] },\r\n  about: { exactArity: 1, params: [[\"str\", \"func\"]], returns: [\"dict\"] },\r\n  reset: { exactArity: 0 },\r\n  recur: {},\r\n};\r\n\r\nexport const syntaxes = [\r\n  \"function\",\r\n  \"fn\",\r\n  \"var\",\r\n  \"let\",\r\n  \"var!\",\r\n  \"let!\",\r\n  \"return\",\r\n  \"if\",\r\n  \"if!\",\r\n  \"when\",\r\n  \"unless\",\r\n  \"while\",\r\n  \"loop\",\r\n  \"match\",\r\n  \"catch\",\r\n];\r\n\r\nexport const typeNames = {\r\n  null: \"null\",\r\n  str: \"string\",\r\n  num: \"number\",\r\n  bool: \"boolean\",\r\n  key: \"keyword\",\r\n  ref: \"reference\",\r\n  vec: \"vector\",\r\n  dict: \"dictionary\",\r\n  func: \"function\",\r\n  clo: \"closure\",\r\n  wild: \"wildcard\",\r\n  ext: \"external\",\r\n};\r\n\r\nexport const assertUnreachable = (_x: never): never => <never>0;\r\n","import { has, isArray, len } from \"./poly-fills\";\r\nimport { ErrCtx, InvokeError, ops, typeNames, Val } from \"./types\";\r\n\r\nexport const asBoo = (val: Val) =>\r\n  val.t === \"bool\" ? val.v : val.t !== \"null\";\r\n\r\nexport function arityCheck(op: string, nArg: number, errCtx: ErrCtx) {\r\n  const { exactArity, maxArity, minArity } = ops[op];\r\n  const aErr = (msg: string, amount: number) => [\r\n    <InvokeError>{\r\n      e: \"Arity\",\r\n      m: `${op} needs ${msg} argument${amount !== 1 ? \"s\" : \"\"}, not ${nArg}`,\r\n      errCtx,\r\n    },\r\n  ];\r\n  if (exactArity !== undefined) {\r\n    if (nArg !== exactArity) {\r\n      return aErr(`exactly ${exactArity}`, exactArity);\r\n    }\r\n  } else {\r\n    if (minArity && !maxArity && nArg < minArity) {\r\n      return aErr(`at least ${minArity}`, minArity);\r\n    } else if (!minArity && maxArity && nArg > maxArity) {\r\n      return aErr(`at most ${maxArity}`, maxArity);\r\n    } else if (minArity && maxArity && (nArg < minArity || nArg > maxArity)) {\r\n      return aErr(`between ${minArity} and ${maxArity}`, maxArity);\r\n    }\r\n  }\r\n}\r\n\r\nexport function typeCheck(\r\n  op: string,\r\n  args: Val[\"t\"][][],\r\n  errCtx: ErrCtx,\r\n  optimistic = false,\r\n): InvokeError[] | undefined {\r\n  const { params: types, numeric: onlyNum } = ops[op];\r\n  const nArg = len(args);\r\n  if (onlyNum) {\r\n    const nonNumArgIdx = args.findIndex(\r\n      a =>\r\n        !!len(a) && (optimistic ? !a.find(t => t === \"num\") : a[0] !== \"num\"),\r\n    );\r\n    if (nonNumArgIdx === -1) {\r\n      return;\r\n    }\r\n    const names = args[nonNumArgIdx]!.map(t => typeNames[t]).join(\", \");\r\n    return [\r\n      typeErr(`${op} takes numeric arguments only, not ${names}`, errCtx),\r\n    ];\r\n  }\r\n  if (!types) {\r\n    return;\r\n  }\r\n  const typeViolations = types\r\n    .map((need, i) => {\r\n      if (i >= nArg || !args[i] || need === \"any\") {\r\n        return false;\r\n      }\r\n      const argTypes = args[i]!;\r\n      if (isArray(need)) {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || argTypes.some(t => has(need, t))\r\n            : len(argTypes) === 1 && has(need, argTypes[0])\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        const needs = need.map(t => typeNames[t]).join(\", \");\r\n        return `argument ${i + 1} must be either: ${needs}, not ${names}`;\r\n      } else {\r\n        if (\r\n          optimistic\r\n            ? !len(argTypes) || has(argTypes, need)\r\n            : len(argTypes) === 1 && need === argTypes[0]\r\n        ) {\r\n          return false;\r\n        }\r\n        const names = argTypes.map(t => typeNames[t]);\r\n        return `argument ${i + 1} must be ${typeNames[need]}, not ${names}`;\r\n      }\r\n    })\r\n    .filter(r => !!r);\r\n  return len(typeViolations)\r\n    ? typeViolations.map(v => typeErr(<string>v, errCtx))\r\n    : undefined;\r\n}\r\n\r\nexport const typeErr = (m: string, errCtx: ErrCtx): InvokeError => ({\r\n  e: \"Type\",\r\n  m,\r\n  errCtx,\r\n});\r\n\r\nexport function numOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `number as operation argument must be string, vector, or dictionary, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function keyOpErr(errCtx: ErrCtx, types: Val[\"t\"][]): InvokeError[] {\r\n  const names = types.map(t => typeNames[t]).join(\", \");\r\n  return [\r\n    typeErr(\r\n      `keyword as operation argument must be dictionary or vector, not ${names}`,\r\n      errCtx,\r\n    ),\r\n  ];\r\n}\r\n","import { has, len, push, slice } from \"./poly-fills\";\r\nimport { Closure, Func, Ins, Val } from \"./types\";\r\n\r\n/** Declare a closure from instructions and other info, calculating its\r\n * captures ahead-of-time. Skips sub-closures as the parser builds them\r\n * bottom-up. */\r\nexport function makeClosure(\r\n  name: string,\r\n  params: string[],\r\n  cins: Ins[],\r\n): Closure {\r\n  const captures: boolean[] = [];\r\n  const derefs: Ins[] = [];\r\n  const exclusions: string[] = params;\r\n  for (let i = 0, lim = len(cins); i < lim; ++i) {\r\n    const cin = cins[i];\r\n    let capture = false;\r\n    if (cin.typ === \"clo\") {\r\n      //Skip sub-closures as they have already calculated their captures\r\n      i += cin.value.length;\r\n      continue;\r\n    } else if (cin.typ === \"let\" || cin.typ === \"var\") {\r\n      exclusions.push(cin.value);\r\n    } else if (canCapture(exclusions, cin, i + 1 !== lim && cins[i + 1])) {\r\n      derefs.push(cin);\r\n      capture = true;\r\n    }\r\n    captures.push(capture);\r\n  }\r\n  return { name, length: len(cins), captures, derefs };\r\n}\r\n\r\n/** Create a function representing a parent closure, and its sub-closures with\r\n * all values needing captured at this point having been replaced. */\r\nexport function makeEnclosure(\r\n  { name, length, captures, derefs }: Closure,\r\n  cins: Ins[],\r\n  derefed: Val[],\r\n): Func {\r\n  const ins: Ins[] = [];\r\n  const errCtxs = derefs.map(i => i.errCtx);\r\n  for (let i = 0, ci = 0; i < length; ++i) {\r\n    const cin = cins[i];\r\n    if (cin.typ === \"clo\") {\r\n      push(ins, slice(cins, i, i + 1 + cin.value.length));\r\n      i += cin.value.length;\r\n    } else if (captures[ci++]) {\r\n      ins.push({\r\n        typ: \"val\",\r\n        value: derefed.shift()!,\r\n        errCtx: errCtxs.shift()!,\r\n      });\r\n    } else {\r\n      ins.push(cin);\r\n    }\r\n  }\r\n  return { name, ins };\r\n}\r\n\r\n/** Tests whether an Instruction in a particular context can be captured.\r\n * Doesn't attempt to rewrite str Vals because they are mapped and captured\r\n * (or not) within the let/var Ctx in the machine. */\r\nfunction canCapture(exclusions: string[], ins0: Ins, ins1: false | Ins) {\r\n  const isExeVal =\r\n    ins1 && ins0.typ === \"val\" && ins0.value.t === \"str\" && ins1.typ === \"exe\";\r\n  return (\r\n    isExeVal ||\r\n    (ins0.typ === \"npa\" && !has(exclusions, ins0.text)) ||\r\n    (ins0.typ === \"ref\" && !has(exclusions, ins0.value))\r\n  );\r\n}\r\n","import { arityCheck, keyOpErr, numOpErr, typeCheck } from \"./checks\";\r\nimport { makeClosure } from \"./closure\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { has, flat, push, slice, splice } = pf;\r\nconst { slen, starts, sub, substr, strIdx, subIdx } = pf;\r\nconst { isNum, len, toNum } = pf;\r\nimport { ParamsShape, Func, Funcs, Ins, ops, Val, syntaxes } from \"./types\";\r\nimport { assertUnreachable, InvokeError, ErrCtx } from \"./types\";\r\n\r\nexport type Token = {\r\n  typ: \"str\" | \"num\" | \"sym\" | \"rem\" | \"(\" | \")\";\r\n  text: string;\r\n  errCtx: ErrCtx;\r\n};\r\ntype Node = Token | Node[];\r\ntype ParserIns = Ins | { typ: \"err\"; value: string; errCtx: ErrCtx };\r\nconst nullVal: Val = { t: \"null\", v: undefined };\r\nconst falseVal = <Val>{ t: \"bool\", v: false };\r\ntype NamedNodes = {\r\n  name: string;\r\n  nodes: Node[];\r\n};\r\nconst isToken = (node: Node | undefined): node is Token =>\r\n  !!node && \"errCtx\" in node;\r\nconst symAt = (node: Node, pos = 0) => {\r\n  if (isToken(node)) {\r\n    return \"\";\r\n  }\r\n  const arg = node[pos];\r\n  return (isToken(arg) && has([\"sym\", \"str\"], arg.typ) && arg.text) || \"\";\r\n};\r\nconst token2str = ({ typ, text }: Token): string =>\r\n  typ === \"str\" ? `\"${text}\"` : text;\r\nfunction node2str(nodes: Node[]): string {\r\n  const sym0 = symAt(nodes, 0);\r\n  const isClosure = has([\"#\", \"@\"], sym0);\r\n  if (isClosure) {\r\n    nodes = slice(nodes, 1);\r\n  }\r\n  return `${isClosure ? sym0 : \"\"}(${nodes\r\n    .map(n => (isToken(n) ? token2str(n) : node2str(n)))\r\n    .join(\" \")})`;\r\n}\r\n\r\n/** Inserts pop instruction after penultimate body expression */\r\nconst poppedBody = (expressions: ParserIns[][]): ParserIns[] => {\r\n  if (len(expressions) === 1) {\r\n    return flat(expressions);\r\n  }\r\n  const lastExp = expressions[len(expressions) - 1];\r\n  const truncatedExps = slice(expressions, 0, len(expressions) - 1);\r\n  const popIns = <ParserIns>{\r\n    typ: \"pop\",\r\n    value: len(truncatedExps),\r\n    errCtx: lastExp[0].errCtx,\r\n  };\r\n  return flat([...truncatedExps, [popIns], lastExp]);\r\n};\r\n\r\nexport function tokenise(\r\n  code: string,\r\n  invokeId: string,\r\n  doTransforms = true,\r\n  emitComments = false,\r\n) {\r\n  const tokens: Token[] = [];\r\n  const isDigit = (ch: string) => sub(\"0123456789\", ch);\r\n  let [inString, line, col, inStringAt] = [false, 1, 0, [1, 0]];\r\n  let [inSymbol, inNumber, inHex] = [false, false, false];\r\n  for (let i = 0, l = slen(code); i < l; ++i) {\r\n    const c = strIdx(code, i),\r\n      nextCh = i + 1 !== l ? strIdx(code, i + 1) : \"\";\r\n    ++col;\r\n    if (c === \"\\\\\" && inString) {\r\n      tokens[len(tokens) - 1].text += doTransforms\r\n        ? { n: \"\\n\", t: \"\\t\", r: \"\\r\", '\"': '\"' }[nextCh] ||\r\n          (nextCh === \"\\\\\" ? \"\\\\\" : `\\\\${nextCh}`)\r\n        : `\\\\${nextCh}`;\r\n      ++col;\r\n      ++i;\r\n      continue;\r\n    }\r\n    const errCtx: ErrCtx = { invokeId, line, col };\r\n    if (c === '\"') {\r\n      if ((inString = !inString)) {\r\n        inStringAt = [line, col];\r\n        tokens.push({ typ: \"str\", text: \"\", errCtx });\r\n      }\r\n      inNumber = inSymbol = false;\r\n      continue;\r\n    }\r\n    const isWhite = sub(\" \\t\\n\\r,\", c);\r\n    if (!inString && isWhite) {\r\n      inSymbol = false;\r\n      inNumber &&= c === \",\";\r\n      if (c === \"\\n\") {\r\n        ++line;\r\n        col = 0;\r\n      }\r\n      continue;\r\n    }\r\n    if (!inString && c === \";\") {\r\n      const nl = subIdx(substr(code, ++i), \"\\n\");\r\n      const text = substr(code, i, nl > 0 ? nl : l - i);\r\n      i += slen(text);\r\n      ++line;\r\n      col = 0;\r\n      if (emitComments) {\r\n        tokens.push({ typ: \"rem\", text, errCtx });\r\n      }\r\n      continue;\r\n    }\r\n    const isParen = sub(\"()[]{}\", c);\r\n    //Allow one . per number, or hex, or binary, else convert into symbol\r\n    if (inNumber && !isDigit(c)) {\r\n      const hexStart = c === \"x\" && tokens[len(tokens) - 1].text === \"0\";\r\n      inHex = inHex || hexStart;\r\n      inNumber =\r\n        (c === \"b\" && tokens[len(tokens) - 1].text === \"0\") ||\r\n        (c === \".\" && !sub(tokens[len(tokens) - 1].text, \".\")) ||\r\n        (inHex && (hexStart || sub(\"ABCDEFabcdef\", c)));\r\n      if (!inNumber && !isParen && !isWhite) {\r\n        inSymbol = true;\r\n        tokens[len(tokens) - 1].typ = \"sym\";\r\n      }\r\n    }\r\n    //Stop scanning symbol if a paren\r\n    if (inSymbol && isParen) {\r\n      inSymbol = false;\r\n    }\r\n    //If we just finished concatenating a token\r\n    if (!inString && !inSymbol && !inNumber) {\r\n      if (isParen) {\r\n        const text = subIdx(\"[{(\", c) === -1 ? \")\" : \"(\";\r\n        tokens.push({ typ: text, text: doTransforms ? text : c, errCtx });\r\n        if (doTransforms && (c === \"[\" || c === \"{\")) {\r\n          tokens.push({ typ: \"sym\", text: c === \"[\" ? \"vec\" : \"dict\", errCtx });\r\n        }\r\n        continue;\r\n      }\r\n      inNumber =\r\n        isDigit(c) ||\r\n        (c === \".\" && isDigit(nextCh)) ||\r\n        (c === \"-\" && (isDigit(nextCh) || nextCh === \".\"));\r\n      inHex = inSymbol = !inNumber;\r\n      const typ: Token[\"typ\"] = inSymbol ? \"sym\" : \"num\";\r\n      tokens.push({ typ, text: \"\", errCtx });\r\n    }\r\n    tokens[len(tokens) - 1].text += c;\r\n  }\r\n  return { tokens, stringError: inString ? inStringAt : undefined };\r\n}\r\n\r\n/** Parses tokens into a tree where each node is a token or token list. */\r\nfunction treeise(tokens: Token[]): Node[] {\r\n  const nodes: Node[] = [];\r\n  const _treeise = (tokens: Token[]): Node => {\r\n    let prefix: Token | undefined;\r\n    if (tokens[0].typ === \"sym\" && sub(\"@#\", tokens[0].text)) {\r\n      prefix = tokens.shift()!;\r\n    }\r\n    const token = tokens.shift()!;\r\n    if (token.typ !== \"(\" && token.typ !== \")\") {\r\n      return token;\r\n    }\r\n    const nodes: Node[] = prefix ? [prefix] : [];\r\n    while (tokens[0].typ !== \")\") {\r\n      nodes.push(_treeise(tokens));\r\n    }\r\n    tokens.shift();\r\n    return nodes;\r\n  };\r\n  while (len(tokens)) {\r\n    nodes.push(_treeise(tokens));\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/** Separates function nodes and non-function nodes,\r\n * with non-function nodes collected into (function entry ...)\r\n * if there are any.*/\r\nfunction collectFuncs(\r\n  nodes: Node[],\r\n): ({ name: string; nodes: Node[] } | { err: string; errCtx: ErrCtx })[] {\r\n  const funcs: ReturnType<typeof collectFuncs> = [];\r\n  const entries: Node[] = [];\r\n  nodes.forEach(node => {\r\n    if (!isToken(node) && isToken(node[0]) && symAt(node) === \"function\") {\r\n      const name = symAt(node, 1);\r\n      if (!name) {\r\n        funcs.push({ err: \"nameless function\", errCtx: node[0].errCtx });\r\n      } else if (len(node) < 3) {\r\n        funcs.push({ err: \"empty function body\", errCtx: node[0].errCtx });\r\n      }\r\n      funcs.push({ name, nodes: slice(node, 2) });\r\n    } else {\r\n      entries.push(node);\r\n    }\r\n  });\r\n  if (len(entries)) {\r\n    funcs.push({ name: \"entry\", nodes: entries });\r\n  }\r\n  return funcs;\r\n}\r\n\r\nconst parseNode = (node: Node, params: ParamsShape) =>\r\n  isToken(node) ? parseArg(node, params) : parseForm(node, params);\r\n\r\nfunction parseForm(\r\n  nodes: Node[],\r\n  params: ParamsShape,\r\n  doArityCheck = true,\r\n): ParserIns[] {\r\n  if (!len(nodes)) {\r\n    return [];\r\n  }\r\n  const nodeParser = (node: Node) => parseNode(node, params);\r\n  let firstNode = nodes.shift()!;\r\n  let head = nodeParser(firstNode);\r\n  const { errCtx } = head[0];\r\n  if (isToken(firstNode) && firstNode.typ === \"sym\") {\r\n    //1-off arity deficiency rewritten as closure\r\n    if (firstNode.text in ops) {\r\n      const { exactArity, minArity } = ops[firstNode.text];\r\n      const a = exactArity ?? minArity;\r\n      if (a && a !== 1 && len(nodes) + 1 === a) {\r\n        nodes.unshift(firstNode);\r\n        firstNode = { typ: \"sym\", text: \"@\", errCtx: firstNode.errCtx };\r\n      }\r\n    }\r\n    if (has([\"var\", \"let\"], firstNode.text) && len(nodes) && len(nodes) % 2) {\r\n      nodes.unshift(firstNode);\r\n      nodes.push({ typ: \"sym\", text: \"%\", errCtx: firstNode.errCtx });\r\n      firstNode = { typ: \"sym\", text: \"#\", errCtx: firstNode.errCtx };\r\n    }\r\n    const { text: op, errCtx } = firstNode;\r\n    const err = (m: string, eCtx = errCtx) => [\r\n      <ParserIns>{ typ: \"err\", value: m, errCtx: eCtx },\r\n    ];\r\n\r\n    if (has([\"if\", \"if!\", \"when\", \"unless\", \"match\"], op) && !len(nodes)) {\r\n      return err(\"provide a condition\");\r\n    } else if (has([\"if\", \"if!\"], op)) {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide at least one branch\");\r\n      } else if (len(nodes) > 3) {\r\n        return err(`provide one or two branches, not ${len(nodes)}`);\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, branch1] = parsed;\r\n      let branch2 = parsed[2];\r\n      const ifN = op === \"if!\" && [\r\n        <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" }, errCtx },\r\n        <Ins>{ typ: \"exe\", value: 1, errCtx },\r\n      ];\r\n      if (!branch2) {\r\n        branch2 = [{ typ: \"val\", value: nullVal, errCtx }];\r\n      }\r\n      return [\r\n        ...cond,\r\n        ...(ifN || []),\r\n        { typ: \"if\", value: len(branch1) + 1, errCtx },\r\n        ...branch1,\r\n        { typ: \"jmp\", value: len(branch2), errCtx },\r\n        ...branch2,\r\n      ];\r\n    } else if (op === \"when\" || op === \"unless\") {\r\n      if (len(nodes) === 1) {\r\n        return err(\"provide a body\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, body] = [parsed[0], slice(parsed, 1)];\r\n      const bodyIns = poppedBody(body);\r\n      return [\r\n        ...cond,\r\n        ...(op === \"unless\"\r\n          ? [\r\n              <Ins>{ typ: \"val\", value: { t: \"func\", v: \"!\" } },\r\n              <Ins>{ typ: \"exe\", value: 1 },\r\n            ]\r\n          : []),\r\n        { typ: \"if\", value: len(bodyIns) + 1, errCtx },\r\n        ...bodyIns,\r\n        { typ: \"jmp\", value: 1, errCtx },\r\n        { typ: \"val\", value: nullVal, errCtx },\r\n      ];\r\n    } else if (op === \"match\") {\r\n      const parsed = nodes.map(nodeParser);\r\n      const [cond, args] = [parsed[0], slice(parsed, 1)];\r\n      const otherwise: ParserIns[] = len(args) % 2 ? args.pop()! : [];\r\n      if (!len(args)) {\r\n        return err(\"provide at least one case\");\r\n      }\r\n      const elseLen = len(otherwise);\r\n      let insCount =\r\n        args.reduce((acc, a) => acc + len(a), 0) +\r\n        (elseLen ? elseLen : 2) +\r\n        len(args);\r\n      const ins: ParserIns[] = cond;\r\n      while (len(args) > 1) {\r\n        const [a, when] = [args.shift()!, args.shift()!];\r\n        push(ins, a);\r\n        ins.push({ typ: \"mat\", value: len(when) + 1, errCtx });\r\n        push(ins, when);\r\n        insCount -= len(a) + len(when) + 2;\r\n        ins.push({ typ: \"jmp\", value: insCount, errCtx });\r\n      }\r\n      if (len(otherwise)) {\r\n        push(ins, otherwise);\r\n      } else {\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      }\r\n      return ins;\r\n    } else if (op === \"catch\") {\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const when = nodeParser(nodes.pop()!);\r\n      const body = flat(nodes.map(nodeParser));\r\n      return [...body, { typ: \"cat\", value: len(when), errCtx }, ...when];\r\n    } else if (op === \"and\" || op === \"or\" || op === \"while\") {\r\n      const args = nodes.map(nodeParser);\r\n      if (len(args) < 2) {\r\n        return err(\"provide at least 2 arguments\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      if (op === \"while\") {\r\n        const [head, body] = [args[0], slice(args, 1)];\r\n        const flatBody = poppedBody(body);\r\n        const ifJmp = len(flatBody) + 2;\r\n        const looJmp = -(len(head) + len(flatBody) + 3);\r\n        ins.push({ typ: \"val\", value: nullVal, errCtx });\r\n        push(ins, head);\r\n        ins.push({ typ: \"if\", value: ifJmp, errCtx });\r\n        ins.push({ typ: \"pop\", value: 1, errCtx });\r\n        push(ins, flatBody);\r\n        ins.push({ typ: \"loo\", value: looJmp, errCtx });\r\n        return ins;\r\n      }\r\n      let insCount = args.reduce((acc, a) => acc + len(a), 0);\r\n      insCount += len(args); //+1 for each if/or ins\r\n      insCount += toNum(op === \"and\");\r\n      const typ = op === \"and\" ? \"if\" : \"or\";\r\n      for (let a = 0; a < len(args); ++a) {\r\n        push(ins, args[a]);\r\n        insCount -= len(args[a]);\r\n        ins.push({ typ, value: insCount, errCtx });\r\n        --insCount;\r\n      }\r\n      if (op === \"and\") {\r\n        push(ins, [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: true }, errCtx },\r\n          { typ: \"jmp\", value: 1, errCtx },\r\n        ]);\r\n      }\r\n      ins.push({ typ: \"val\", value: falseVal, errCtx });\r\n      return ins;\r\n    } else if (op === \"loop\") {\r\n      if (len(nodes) < 3) {\r\n        return err(\"provide at least 3 arguments\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const symNode = nodes[1];\r\n      const body = poppedBody(slice(parsed, 2));\r\n      if (!isToken(symNode)) {\r\n        return err(\"argument 2 must be symbol\");\r\n      }\r\n      //(let sym 0 sym-limit n) ... body ... (if (< (let sym (inc sym)) sym-limit) <exit> <loo>)\r\n      const ins: ParserIns[] = [\r\n        { typ: \"val\", value: { t: \"num\", v: 0 }, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        ...parsed[0],\r\n        { typ: \"let\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        ...body,\r\n        { typ: \"ref\", value: symNode.text, errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"inc\" }, errCtx },\r\n        { typ: \"exe\", value: 1, errCtx },\r\n        { typ: \"let\", value: symNode.text, errCtx },\r\n        { typ: \"ref\", value: symNode.text + \"-limit\", errCtx },\r\n        { typ: \"val\", value: { t: \"func\", v: \"<\" }, errCtx },\r\n        { typ: \"exe\", value: 2, errCtx },\r\n        { typ: \"if\", value: 2, errCtx },\r\n        { typ: \"pop\", value: 1, errCtx },\r\n        { typ: \"loo\", value: -(len(body) + 10), errCtx },\r\n      ];\r\n      return ins;\r\n    } else if (op === \"var\" || op === \"let\") {\r\n      const defs = nodes.filter((n, i) => !(i % 2));\r\n      const vals = nodes.filter((n, i) => !!(i % 2));\r\n      if (!len(defs)) {\r\n        return err(\"provide at least 1 declaration name and value\");\r\n      } else if (len(defs) > len(vals)) {\r\n        return err(\"provide a value after each declaration name\");\r\n      }\r\n      const ins: ParserIns[] = [];\r\n      const symErrMsg = `${op} name must be a new symbol or destructuring`;\r\n      for (let d = 0, lim = len(defs); d < lim; ++d) {\r\n        push(ins, nodeParser(vals[d]));\r\n        const def = defs[d];\r\n        if (isToken(def)) {\r\n          const defIns = parseNode(defs[d], params);\r\n          if (len(defIns) > 1 || defIns[0].typ !== \"ref\") {\r\n            return err(symErrMsg, defIns[0].errCtx);\r\n          }\r\n          ins.push({ typ: op, value: defIns[0].value, errCtx });\r\n        } else {\r\n          const { shape, errors } = parseParams([def], true);\r\n          if (len(errors)) {\r\n            return errors;\r\n          }\r\n          if (!len(shape)) {\r\n            return err(symErrMsg);\r\n          }\r\n          const typ = op === \"var\" ? \"dva\" : \"dle\";\r\n          ins.push({ typ, value: shape, errCtx });\r\n        }\r\n      }\r\n      return ins;\r\n    } else if (op === \"var!\" || op === \"let!\") {\r\n      //Rewrite e.g. (var! a + 1) -> (var a (+ a 1))\r\n      if (len(nodes) < 2) {\r\n        return err(\"provide 1 declaration name and 1 function\");\r\n      }\r\n      const parsed = nodes.map(nodeParser);\r\n      const [def, func, args] = [parsed[0][0], parsed[1], slice(parsed, 2)];\r\n      if (def.typ !== \"ref\") {\r\n        return err(\"declaration name must be symbol\", def.errCtx);\r\n      }\r\n      const ins: Ins[] = [{ typ: \"ref\", value: def.value, errCtx }];\r\n      push(ins, [...flat(args), ...func]);\r\n      ins.push({ typ: \"exe\", value: len(args) + 1, errCtx });\r\n      const typ = op === \"var!\" ? \"var\" : \"let\";\r\n      ins.push({ typ, value: def.value, errCtx });\r\n      return ins;\r\n    } else if (op === \"#\" || op === \"@\" || op === \"fn\") {\r\n      const pins: ParserIns[] = [];\r\n      const name = node2str([firstNode, ...nodes]);\r\n      const cloParams: string[] = [];\r\n      let monoFnBody = false;\r\n      if (op === \"fn\") {\r\n        const parsedParams = parseParams(nodes, false);\r\n        push(\r\n          cloParams,\r\n          parsedParams.shape.map(p => p.name),\r\n        );\r\n        params = parsedParams.shape;\r\n        push(pins, parsedParams.errors);\r\n        if (!len(nodes)) {\r\n          return err(\"provide a body\");\r\n        }\r\n        monoFnBody = len(nodes) === 1;\r\n        nodes.unshift({ typ: \"sym\", text: \"do\", errCtx });\r\n      }\r\n      //Rewrite partial closure to #(... [body] args)\r\n      if (op === \"@\") {\r\n        const firstSym = symAt(nodes, 0);\r\n        if (has(syntaxes, firstSym)) {\r\n          const { errCtx } = nodes[0] as Token;\r\n          return err(\r\n            `\"${firstSym}\" syntax unavailable in partial closure`,\r\n            errCtx,\r\n          );\r\n        }\r\n        nodes = [\r\n          { typ: \"sym\", text: \"...\", errCtx },\r\n          ...nodes,\r\n          { typ: \"sym\", text: \"args\", errCtx },\r\n        ];\r\n      }\r\n      push(pins, parseForm(nodes, params, op !== \"@\"));\r\n      const cins = <Ins[]>pins.filter(i => i.typ !== \"err\");\r\n      const errors = pins.filter(i => i.typ === \"err\");\r\n      if (len(errors)) {\r\n        return errors;\r\n      }\r\n      //Remove do exe when fn body is only one expression\r\n      if (monoFnBody) {\r\n        cins.pop();\r\n        cins.pop();\r\n      }\r\n      return [\r\n        { typ: \"clo\", value: makeClosure(name, cloParams, cins), errCtx },\r\n        ...cins,\r\n      ];\r\n    }\r\n\r\n    //Operation arity check, optionally disabled for partial closures\r\n    if (ops[op] && doArityCheck) {\r\n      const errors = arityCheck(op, len(nodes), errCtx);\r\n      const err = (value: string, eCtx = errCtx) => [\r\n        <ParserIns>{ typ: \"err\", value, errCtx: eCtx },\r\n      ];\r\n      push(head, errors?.map(e => err(e.m)[0]) ?? []);\r\n      if (!errors) {\r\n        //Upgrade some math and logic functions to their faster counterparts\r\n        if (len(nodes) === 2 && ops[`fast${op}`]) {\r\n          head = nodeParser({ typ: \"sym\", text: `fast${op}`, errCtx });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const args = nodes.map(nodeParser);\r\n  const ins: ParserIns[] = flat(args);\r\n  if (symAt([firstNode]) === \"return\") {\r\n    return [...ins, { typ: \"ret\", value: !!len(args), errCtx }];\r\n  } else if (head[0].typ === \"ref\") {\r\n    const { value: v, errCtx } = head[0];\r\n    head[0] = { typ: \"val\", value: { t: \"str\", v }, errCtx };\r\n  }\r\n  push(ins, head);\r\n  const typ = len(head) > 1 || has([\"npa\", \"upa\"], head[0].typ) ? \"exa\" : \"exe\";\r\n  return [...ins, { typ, value: len(args), errCtx }];\r\n}\r\n\r\nfunction parseArg(node: Node, params: ParamsShape): ParserIns[] {\r\n  if (isToken(node)) {\r\n    const { errCtx } = node;\r\n    if (node.typ === \"str\") {\r\n      return [{ typ: \"val\", value: { t: \"str\", v: node.text }, errCtx }];\r\n    } else if (node.typ === \"num\") {\r\n      return [{ typ: \"val\", value: { t: \"num\", v: toNum(node.text) }, errCtx }];\r\n    } else if (node.typ === \"sym\") {\r\n      const { text } = node;\r\n      const paramNames = params.map(({ name }) => name);\r\n      if (text === \"true\" || text === \"false\") {\r\n        return [\r\n          { typ: \"val\", value: <Val>{ t: \"bool\", v: text === \"true\" }, errCtx },\r\n        ];\r\n      } else if (text === \"null\") {\r\n        return [{ typ: \"val\", value: nullVal, errCtx }];\r\n      } else if (text === \"_\") {\r\n        return [{ typ: \"val\", value: { t: \"wild\", v: undefined }, errCtx }];\r\n      } else if (starts(text, \":\")) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"key\", v: text }, errCtx }];\r\n      } else if (\r\n        text === \"%\" ||\r\n        (starts(text, \"%\") && isNum(substr(text, 1)))\r\n      ) {\r\n        const value = text === \"%\" ? 0 : toNum(substr(text, 1));\r\n        if (value < 0) {\r\n          return [{ typ: \"val\", value: nullVal, errCtx }];\r\n        }\r\n        return [{ typ: \"upa\", value, text, errCtx }];\r\n      } else if (has(paramNames, text)) {\r\n        const param = params.find(({ name }) => name === text)!;\r\n        if (len(param.position) === 1) {\r\n          return [{ typ: \"npa\", value: param.position[0], text, errCtx }];\r\n        }\r\n        return [{ typ: \"dpa\", value: param.position, errCtx }];\r\n      } else if (text === \"args\") {\r\n        return [{ typ: \"upa\", value: -1, text: \"args\", errCtx }];\r\n      } else if (text === \"PI\" || text === \"E\") {\r\n        const v = text === \"PI\" ? 3.141592653589793 : 2.718281828459045;\r\n        return [{ typ: \"val\", value: { t: \"num\", v }, errCtx }];\r\n      } else if (ops[text]) {\r\n        return [{ typ: \"val\", value: <Val>{ t: \"func\", v: text }, errCtx }];\r\n      }\r\n      return [{ typ: \"ref\", value: text, errCtx }];\r\n    }\r\n    return [];\r\n  } else if (!len(node)) {\r\n    return [];\r\n  }\r\n  return parseForm(node, params);\r\n}\r\n\r\n/** Consumes some tokens and returns ParamsShape.\r\n * Example inputs:\r\n * \"(fn \"   a [b [c]] d [d c b a]\r\n * \"(var \" [a] [1 2] b [1 2]\r\n * \"(function \" [x] (print x) x\r\n * \"(function \" x [x]\r\n * \"(fn \"\r\n * \"(function \"\r\n * */\r\nfunction parseParams(\r\n  nodes: Node[],\r\n  consumeLast: boolean,\r\n  position: number[] = [],\r\n): { shape: ParamsShape; errors: ParserIns[] } {\r\n  const shape: ParamsShape = [],\r\n    errs: ParserIns[] = [];\r\n  let n = 0;\r\n  while (\r\n    len(nodes) > (consumeLast ? 0 : 1) &&\r\n    (isToken(nodes[0]) || symAt(nodes[0]) === \"vec\")\r\n  ) {\r\n    const param = nodes.shift()!;\r\n    if (!isToken(param)) {\r\n      param.shift();\r\n      const parsed = parseParams(param, true, [...position, n]);\r\n      push(shape, parsed.shape);\r\n      push(errs, parsed.errors);\r\n    } else {\r\n      const { typ, errCtx } = param;\r\n      if (typ === \"sym\") {\r\n        shape.push({ name: param.text, position: [...position, n] });\r\n      } else {\r\n        errs.push({ typ: \"err\", value: \"provide parameter name\", errCtx });\r\n      }\r\n    }\r\n    ++n;\r\n  }\r\n  return { shape, errors: errs };\r\n}\r\n\r\nfunction compileFunc({ name, nodes: nodes }: NamedNodes): Func | InvokeError {\r\n  const { shape: params, errors } = parseParams(nodes, false);\r\n  const ins = [...errors, ...flat(nodes.map(node => parseArg(node, params)))];\r\n  for (let i = 0, lim = len(ins); i < lim; i++) {\r\n    const { typ, value, errCtx } = ins[i];\r\n    if (typ === \"err\") {\r\n      return <InvokeError>{ e: \"Parse\", m: value, errCtx };\r\n    }\r\n  }\r\n  return { name, ins: <Ins[]>ins };\r\n}\r\n\r\nfunction findParenImbalance(\r\n  tokens: Token[],\r\n  numL: number,\r\n  numR: number,\r\n): [number, number] {\r\n  //Scan for first instance of untimely closed\r\n  //  or last instance of unclosed open\r\n  const untimely = numR >= numL;\r\n  const [l, r] = [untimely ? \"(\" : \")\", untimely ? \")\" : \"(\"];\r\n  const direction = untimely ? 1 : -1;\r\n  for (\r\n    let lim = len(tokens), t = untimely ? 0 : lim - 1, depth = 0;\r\n    untimely ? t < lim : t >= 0;\r\n    t += direction\r\n  ) {\r\n    const {\r\n      typ,\r\n      errCtx: { line, col },\r\n    } = tokens[t];\r\n    depth += toNum(typ === l) - toNum(typ === r);\r\n    if (depth < 0) {\r\n      return [line, col];\r\n    }\r\n  }\r\n  return [0, 0];\r\n}\r\n\r\nfunction tokenErrorDetect(stringError: number[] | undefined, tokens: Token[]) {\r\n  const invokeId = len(tokens) ? tokens[0].errCtx.invokeId : \"\";\r\n  const errors: InvokeError[] = [];\r\n  const err = (m: string, errCtx: ErrCtx) =>\r\n    errors.push({ e: \"Parse\", m, errCtx });\r\n\r\n  //Check for double-quote imbalance\r\n  if (stringError) {\r\n    const [line, col] = stringError;\r\n    err(\"unmatched double quotation marks\", { invokeId, line, col });\r\n    return errors;\r\n  }\r\n\r\n  //Check for paren imbalance\r\n  const countTyp = (t: Token[\"typ\"]) =>\r\n    len(tokens.filter(({ typ }) => typ === t));\r\n  const [numL, numR] = [countTyp(\"(\"), countTyp(\")\")];\r\n  {\r\n    const [line, col] = findParenImbalance(tokens, numL, numR);\r\n    if (line + col) {\r\n      err(\"unmatched parenthesis\", { invokeId: invokeId, line, col });\r\n    }\r\n  }\r\n\r\n  //Check for any empty expressions\r\n  let emptyHead: Token | undefined;\r\n  for (let t = 0, lastWasL = false; t < len(tokens); ++t) {\r\n    if (lastWasL && tokens[t].typ === \")\") {\r\n      emptyHead = tokens[t];\r\n      break;\r\n    }\r\n    lastWasL = tokens[t].typ === \"(\";\r\n  }\r\n  if (emptyHead) {\r\n    err(\"empty expression forbidden\", emptyHead.errCtx);\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n//TODO: investigate Node implementation replacement\r\nfunction insErrorDetect(fins: Ins[]): InvokeError[] | undefined {\r\n  type TypeInfo = {\r\n    types?: Val[\"t\"][];\r\n    val?: Val;\r\n  };\r\n  const stack: TypeInfo[] = [];\r\n  for (let i = 0, lim = len(fins); i < lim; ++i) {\r\n    const ins = fins[i];\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push({ types: [ins.value.t], val: ins.value });\r\n        break;\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const head = stack.pop()!;\r\n        const args = splice(stack, len(stack) - ins.value, ins.value);\r\n        const badMatch = (okTypes: Val[\"t\"][]) =>\r\n          args.findIndex(\r\n            ({ types }) => types && !okTypes.find(t => has(types, t)),\r\n          );\r\n        const headIs = (t: Val[\"t\"]) =>\r\n          head.val\r\n            ? head.val.t === t\r\n            : head.types && len(head.types) === 1 && head.types[0] === t;\r\n        if (head.val && head.val.t === \"func\") {\r\n          if (head.val.v === \"recur\") {\r\n            splice(stack, len(stack) - ins.value, ins.value);\r\n            break;\r\n          }\r\n          const errors = typeCheck(\r\n            head.val.v,\r\n            args.map(a => a.types ?? []),\r\n            ins.errCtx,\r\n            true,\r\n          );\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const { returns, numeric: onlyNum } = ops[head.val.v];\r\n          stack.push(\r\n            onlyNum && onlyNum !== \"in only\"\r\n              ? { types: [\"num\"] }\r\n              : { types: returns },\r\n          );\r\n        } else if (headIs(\"num\")) {\r\n          const badArg = badMatch([\"str\", \"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return numOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"key\")) {\r\n          const badArg = badMatch([\"dict\", \"vec\"]);\r\n          if (badArg !== -1) {\r\n            return keyOpErr(ins.errCtx, args[badArg].types!);\r\n          }\r\n          stack.push({});\r\n        } else if (headIs(\"str\") || headIs(\"bool\")) {\r\n          stack.push({});\r\n        } else if (!head.types && !head.val) {\r\n          stack.push({});\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        stack.pop();\r\n        stack.push({});\r\n        i += ins.value;\r\n        break;\r\n      case \"cat\":\r\n      case \"var\":\r\n      case \"let\":\r\n      case \"dva\":\r\n      case \"dle\":\r\n      case \"loo\":\r\n      case \"jmp\":\r\n        break;\r\n      case \"clo\": {\r\n        const errors = insErrorDetect(slice(fins, i + 1, i + ins.value.length));\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        stack.push({});\r\n      }\r\n      case \"ref\":\r\n      case \"npa\":\r\n      case \"upa\":\r\n      case \"dpa\":\r\n        stack.push({});\r\n        break;\r\n      case \"if\": {\r\n        stack.pop();\r\n        stack.push({});\r\n        const ifIns = slice(fins, i + 1, ins.value + 1);\r\n        const errors = insErrorDetect(ifIns);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        i += ins.value - 1;\r\n        break;\r\n      }\r\n      case \"mat\": {\r\n        stack.pop(); //first match\r\n        stack.pop(); //cond\r\n        i += ins.value;\r\n        i += fins[i].value as number; //The first jmp\r\n        stack.push({});\r\n        break;\r\n      }\r\n      case \"pop\":\r\n        splice(stack, len(stack) - ins.value, ins.value);\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parse(\r\n  code: string,\r\n  invokeId: string,\r\n): { funcs: Funcs; errors: InvokeError[] } {\r\n  const { tokens, stringError } = tokenise(code, invokeId);\r\n  const tokenErrors = tokenErrorDetect(stringError, tokens);\r\n  if (len(tokenErrors)) {\r\n    return { errors: tokenErrors, funcs: {} };\r\n  }\r\n  const okFuncs: Func[] = [],\r\n    errors: InvokeError[] = [];\r\n  const tree = treeise(slice(tokens));\r\n  const collected = collectFuncs(tree);\r\n  const namedNodes: NamedNodes[] = [];\r\n  collected.forEach(nodeOrErr => {\r\n    if (\"err\" in nodeOrErr) {\r\n      errors.push({ e: \"Parse\", m: nodeOrErr.err, errCtx: nodeOrErr.errCtx });\r\n    } else {\r\n      namedNodes.push({ name: nodeOrErr.name, nodes: nodeOrErr.nodes });\r\n    }\r\n  });\r\n  namedNodes.map(compileFunc).forEach(fae => {\r\n    if (\"e\" in fae) {\r\n      errors.push(fae);\r\n    } else {\r\n      okFuncs.push(fae);\r\n    }\r\n  });\r\n  push(errors, flat(okFuncs.map(f => insErrorDetect(f.ins) ?? [])));\r\n  const funcs: Funcs = {};\r\n  okFuncs.forEach(func => (funcs[func.name ?? \"\"] = func));\r\n  return { errors, funcs };\r\n}\r\n","import { concat, round, getTimeMs, len, padEnd, trim } from \"./poly-fills\";\r\nimport { Ctx, Env, Val, ValOrErr, InvokeResult } from \"./types\";\r\n\r\ntype State = { dict: Map<string, Val>; output: string };\r\n\r\nfunction get(state: State, key: string): ValOrErr {\r\n  if (!state.dict.has(key)) {\r\n    return { kind: \"err\", err: `\"${key}\" not found.` };\r\n  }\r\n  return { kind: \"val\", value: state.dict.get(key)! };\r\n}\r\n\r\nfunction set(state: State, key: string, val: Val): string | undefined {\r\n  state.dict.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nfunction exe(state: State, name: string, args: Val[]): ValOrErr {\r\n  const nullVal: Val = { t: \"null\", v: undefined };\r\n  switch (name) {\r\n    case \"test.function\":\r\n      state.output += args[0].v + \"\\n\";\r\n      break;\r\n    default:\r\n      return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n  }\r\n  return { kind: \"val\", value: nullVal };\r\n}\r\n\r\nconst tests: {\r\n  name: string;\r\n  code: string;\r\n  err?: string[];\r\n  out?: string;\r\n}[] = [\r\n  //Basic snippets\r\n  { name: \"Hello, world!\", code: `\"Hello, world!\"`, out: `Hello, world!` },\r\n  {\r\n    name: \"Say Hello, world!\",\r\n    code: `;This is a test comment\r\n           (print \"Hello, world!\")`,\r\n    out: `Hello, world!\\nnull`,\r\n  },\r\n  { name: \"1 + 1 = 2\", code: `(+ 1 1)`, out: `2` },\r\n  { name: \"Negate 1 = -1\", code: `(- 1)`, out: `-1` },\r\n  { name: \"(1+1)+1+(1+1) = 5\", code: `(+ (+ 1 1) 1 (+ 1 1))`, out: `5` },\r\n  { name: \"Conditional head\", code: `((if true + -) 12 9 1)`, out: `22` },\r\n  {\r\n    name: \"when and unless\",\r\n    code: `[(when 123 (print \"hi\") 234) (unless true (print \"bye\"))]`,\r\n    out: `hi\\n[234 null]`,\r\n  },\r\n  {\r\n    name: \"match and wildcard\",\r\n    code: `(match [1 2]\r\n             [0 0] (print \"hello\")\r\n             [0 2] (print \"bye\")\r\n             [1 _] \"hey\")`,\r\n    out: `hey`,\r\n  },\r\n  { name: \"Cond number head\", code: `((if false 1 2) [:a :b :c])`, out: `:c` },\r\n  {\r\n    name: \"and & short-circuit\",\r\n    code: `[(and true (if true null 1) (print \"hi\")) (and 1 2 3)]`,\r\n    out: `[false true]`,\r\n  },\r\n  {\r\n    name: \"or & short-circuit\",\r\n    code: `[(or true (print \"hi\") 1) (or false (print-str \"-> \") 1)]`,\r\n    out: `-> [true 1]`,\r\n  },\r\n  { name: \"String retrieve\", code: `(2 \"Hello\")`, out: `l` },\r\n  { name: \"Vector retrieve\", code: `(2 [:a :b :c :d])`, out: `:c` },\r\n  {\r\n    name: \"Key as operation\",\r\n    code: `[(:age {:name \"Patrick\" :age 24}) (:abc [:a :abc :c])]`,\r\n    out: `[24 :abc]`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 1\",\r\n    code: `({\"name\" \"Patrick\" \"age\" 24} \"age\")`,\r\n    out: `24`,\r\n  },\r\n  {\r\n    name: \"Dictionary as op 2\",\r\n    code: `({\"name\" \"Patrick\"} \"age\" 24)`,\r\n    out: `{\"name\" \"Patrick\", \"age\" 24}`,\r\n  },\r\n  {\r\n    name: \"Equalities\",\r\n    code: `[(= 1 2 1)\r\n            (!= 1 2 1)\r\n            (= \"Hello\" \"hello\")\r\n            (!= \"world\" \"world\")\r\n            (= [0 [1]] [0 [1]])]`,\r\n    out: `[false true false false true]`,\r\n  },\r\n  { name: \"Define and retrieve\", code: `(var a 1) a`, out: `1` },\r\n  { name: \"Define and add\", code: `(var a 1) (inc a)`, out: `2` },\r\n  { name: \"Define op and call\", code: `(var f +) (f 2 2)`, out: `4` },\r\n  { name: \"Define vec and call\", code: `(var f [1]) (f 1)`, out: `1` },\r\n  {\r\n    name: \"Define num and call\",\r\n    code: `(var f 1) (f [:a :b :c])`,\r\n    out: `:b`,\r\n  },\r\n  { name: \"Apply op to var\", code: `(var a 10) (var! a + 10)`, out: `20` },\r\n  {\r\n    name: \"Apply op to let\",\r\n    code: `(let a 10) (let! a (if true + -) (+ 2 3) 5)`,\r\n    out: `20`,\r\n  },\r\n  { name: \"Print simple vector\", code: `[1 2 3]`, out: `[1 2 3]` },\r\n  { name: \"Boolean select\", code: `[(true 1 2) (false 1)]`, out: `[1 null]` },\r\n  {\r\n    name: \"Sum vector of numbers\",\r\n    code: `[(reduce + [1 2 3]) (reduce + 3 [1 2 3])]`,\r\n    out: `[6 9]`,\r\n  },\r\n  {\r\n    name: \"Sum vectors of numbers\",\r\n    code: `(map + [1 2 3] [1 2 3 4])`,\r\n    out: `[2 4 6]`,\r\n  },\r\n  {\r\n    name: \"For XY list\",\r\n    code: `(for vec [0 1] [0 1])`,\r\n    out: `[[0 0] [1 0] [0 1] [1 1]]`,\r\n  },\r\n  {\r\n    name: \"Filter by integer\",\r\n    code: `(filter 2 [[1] [:a :b :c] \"hello\" \"hi\"])`,\r\n    out: `[[:a :b :c] \"hello\"]`,\r\n  },\r\n  {\r\n    name: \"Comments, short decimal\",\r\n    code: `;((print \"Hello\")\r\n           .456`,\r\n    out: `0.456`,\r\n  },\r\n  {\r\n    name: \"Dictionary into vector\",\r\n    code: `(into [1 2] {3 4 5 6})`,\r\n    out: `[1 2 [3 4] [5 6]]`,\r\n  },\r\n  {\r\n    name: \"Vector into dictionary\",\r\n    code: `(into {[0] 1 [2] 3} [[0] 2])`,\r\n    out: `{[0] 2, [2] 3}`,\r\n  },\r\n  {\r\n    name: \"While loop\",\r\n    code: `(var n 5)\r\n           (while (< 0 n)\r\n             (print-str n)\r\n             (var n (dec n)))`,\r\n    out: `543210`,\r\n  },\r\n  {\r\n    name: \"Loop\",\r\n    code: `(loop 3 i (print-str i))`,\r\n    out: `012null`,\r\n  },\r\n  {\r\n    name: \"Catch error\",\r\n    code: `(catch\r\n             (:e (catch (let a :a) (+ 1 a) (0 errors)))\r\n             (print \"hi\"))`,\r\n    out: `Type`,\r\n  },\r\n  //Basic functions and closures\r\n  { name: \"Define with no call\", code: `(function func (print \"Nothing.\"))` },\r\n  {\r\n    name: \"Call greet func\",\r\n    code: `(function greeting (print \"Hello!\")) (greeting)`,\r\n    out: `Hello!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call const value func\",\r\n    code: `(function const 123) (const)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Call identity funcs\",\r\n    code: `(function id1 %)\r\n           (function id2 x x)\r\n           [(id1 123) (id2 456)]`,\r\n    out: `[123 456]`,\r\n  },\r\n  {\r\n    name: \"Call greet with name\",\r\n    code: `(function greeting name (print \"Hello, \" name \"!\"))\r\n           (greeting \"Patrick\")`,\r\n    out: `Hello, Patrick!\\nnull`,\r\n  },\r\n  {\r\n    name: \"Call with too few args\",\r\n    code: `(function func a b c [a b c]) (func 1 2)`,\r\n    out: `[1 2 null]`,\r\n  },\r\n  {\r\n    name: \"Define func and call\",\r\n    code: `(function func a b (+ a b)) (var f func) (f 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Anonymous parameters\",\r\n    code: `(function avg<n? (< (/ (.. + %) (len %)) %1))\r\n           (avg<n? [0 10 20 30 40] 5)`,\r\n    out: `false`,\r\n  },\r\n  {\r\n    name: \"Call parameter\",\r\n    code: `(function f x (x \"hello\")) (f print)`,\r\n    out: `hello\\nnull`,\r\n  },\r\n  { name: \"Let and retrieve\", code: `(function f (let a 1) a) (f)`, out: `1` },\r\n  {\r\n    name: \"Let num op and call\",\r\n    code: `(function f (let n 0) (n [1])) (f)`,\r\n    out: `1`,\r\n  },\r\n  {\r\n    name: \"Explicit return\",\r\n    code: `(function f (return 123) (print 456)) (f)`,\r\n    out: `123`,\r\n  },\r\n  {\r\n    name: \"Closure 1\",\r\n    code: `(let x 10)\r\n           (let closure #(+ x x))\r\n           (let x 11)\r\n           (closure)`,\r\n    out: `20`,\r\n  },\r\n  {\r\n    name: \"Closure 2\",\r\n    code: `(filter #(or (.. = args) (even? %)) (range 10) 5)`,\r\n    out: `[0 2 4 5 6 8]`,\r\n  },\r\n  {\r\n    name: \"Closure 3\",\r\n    code: `(function f #(+ x x))\r\n           (var x 10) (let c20 (f))\r\n           (var x 20) (let c40 (f))\r\n           [(c20) (c40)]`,\r\n    out: `[20 40]`,\r\n  },\r\n  {\r\n    name: \"Closure with ext func\",\r\n    code: `(#(test.function %) 1)`,\r\n    out: `1\\nnull`,\r\n  },\r\n  {\r\n    name: \"Func returns closure\",\r\n    code: `(function f x #(x 2 2))\r\n           (let closure (f +))\r\n           (closure)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Dictionary closure\",\r\n    code: `(function f x #{x 2})\r\n           (let closure (f :a))\r\n           (closure)`,\r\n    out: `{:a 2}`,\r\n  },\r\n  {\r\n    name: \"Vector closure\",\r\n    code: `(function f x #[1 x %])\r\n           (let closure (f 2))\r\n           (closure 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Closure as head\",\r\n    code: `(#[% %1 %2] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 1\",\r\n    code: `(@[] 1 2 3)`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"Partial closure 2\",\r\n    code: `(@((do +) 2) 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 1\",\r\n    code: `((fn a b (+ a b)) 2 2)`,\r\n    out: `4`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 2\",\r\n    code: `((fn a b (print-str a b) (+ a b)) 2 2)`,\r\n    out: `224`,\r\n  },\r\n  {\r\n    name: \"Parameterised closure 3\",\r\n    code: `(reduce\r\n             (fn primes num\r\n               (if (find zero? (map (rem num) primes))\r\n                 primes\r\n                 (append num primes)))\r\n             [2]\r\n             (range 3 10))`,\r\n    out: `[2 3 5 7]`,\r\n  },\r\n  {\r\n    name: \"Closure with inter-lets\",\r\n    code: `(let a + c 5 d 10)\r\n           (let closure (fn b (let d 1) (a b c d)))\r\n           (let a - c 4 d 11)\r\n           (closure 1)`,\r\n    out: `7`,\r\n  },\r\n  {\r\n    name: \"Closure with inner-let\",\r\n    code: `(((fn x (let y 1) #[x y]) 2))`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Closure with captured f\",\r\n    code: `[((fn x (@(val x))) 0) (var f val) ((fn x (@(f x))) 0)]`,\r\n    out: `[0 val 0]`,\r\n  },\r\n  {\r\n    name: \"Destructure var\",\r\n    code: `(var [x [y]] [1 [2]]) [y x]`,\r\n    out: `[2 1]`,\r\n  },\r\n  {\r\n    name: \"Destructure string\",\r\n    code: `(let [a b c] \"hello\") [a b c]`,\r\n    out: `[\"h\" \"e\" \"l\"]`,\r\n  },\r\n  {\r\n    name: \"Destructure function\",\r\n    code: `(function f a [[b c] d] e [e d c b a]) (f 0 [[1 2] 3] 4)`,\r\n    out: `[4 3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring closure\",\r\n    code: `(let f (fn a [b [c]] d [d c b a])) (f 0 [1 [2]] 3)`,\r\n    out: `[3 2 1 0]`,\r\n  },\r\n  {\r\n    name: \"Destructuring fn decoy\",\r\n    code: `(let f (fn a [a [a]])) (f 0)`,\r\n    out: `[0 [0]]`,\r\n  },\r\n  { name: \"Implicit currying\", code: \"(-> 1 inc (+ 10))\", out: `12` },\r\n  //Runtime errors\r\n  {\r\n    name: \"String instead of number\",\r\n    code: `(function sum (.. + args))\r\n           (print (sum 2 2))\r\n           (sum 2 \"hi\")`,\r\n    out: `4`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Reference non-existing\", code: `x`, err: [\"Reference\"] },\r\n  {\r\n    name: \"Expired let retrieve\",\r\n    code: `(function f (let a 1) a) (f) a`,\r\n    err: [\"Reference\"],\r\n  },\r\n  { name: \"Call non-existing\", code: `(x)`, err: [\"External\"] },\r\n  { name: \"Call budget\", code: `(function f (f)) (f)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Loop budget\",\r\n    code: `(var n 10000)\r\n           (while (< 0 n)\r\n             (var n (dec n)))`,\r\n    err: [\"Budget\"],\r\n  },\r\n  { name: \"Range budget\", code: `(range 10000)`, err: [\"Budget\"] },\r\n  {\r\n    name: \"Head exe arity check\",\r\n    code: `(((fn +)) 1)`,\r\n    err: [\"Arity\"],\r\n  },\r\n  //Complex functions\r\n  {\r\n    name: \"Fibonacci 13\",\r\n    code: `(function fib n\r\n             (if (< n 2) n\r\n               (+ (fib (dec n))\r\n                  (fib (- n 2)))))\r\n           (fib 13)`,\r\n    out: `233`,\r\n  },\r\n  {\r\n    name: \"dedupe (recur)\",\r\n    code: `(function dedupe list -out\r\n             (let out (or -out []))\r\n             (let next (if (out (0 list)) [] [(0 list)]))\r\n             (if (empty? list) out\r\n                 (recur (sect list) (into out next))))\r\n           (dedupe [1 1 2 3 3 3])`,\r\n    out: `[1 2 3]`,\r\n  },\r\n  {\r\n    name: \"frequencies\",\r\n    code: `(function frequencies list\r\n             (reduce #(% %1 (inc (or (% %1) 0))) {} list))\r\n           (frequencies \"12121212\")`,\r\n    out: `{\"1\" 4, \"2\" 4}`,\r\n  },\r\n  //Test environment functions\r\n  {\r\n    name: \"set get\",\r\n    code: `[($globals.time_offset 5.5) $globals.time_offset]`,\r\n    out: `[5.5 5.5]`,\r\n  },\r\n  { name: \"exe\", code: `(test.function 123)`, out: `123\\nnull` },\r\n  //Syntax errors\r\n  { name: \"Empty parens\", code: `()`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 1\", code: `(print (\"hello!\")`, err: [\"Parse\"] },\r\n  { name: \"Imbalanced parens 2\", code: `print \"hello!\")`, err: [\"Parse\"] },\r\n  {\r\n    name: \"Imbalanced quotes\",\r\n    code: `(print \"Hello)`,\r\n    err: [\"Parse\"],\r\n  },\r\n  { name: \"Function as op\", code: `(function)`, err: [\"Parse\"] },\r\n  { name: \"Function without name\", code: `(function (+))`, err: [\"Parse\"] },\r\n  { name: \"Function without body\", code: `(function func)`, err: [\"Parse\"] },\r\n  { name: \"Variable not symbol\", code: `(var 1 2)`, err: [\"Parse\"] },\r\n  //Parser type and arity errors\r\n  { name: \"Parser type error 1\", code: `(function f (+ 1 :a))`, err: [\"Type\"] },\r\n  {\r\n    name: \"Parser type error 2\",\r\n    code: `(function f (+ 1 (into {} {})))`,\r\n    err: [\"Type\"],\r\n  },\r\n  {\r\n    name: \"Parser type error 3\",\r\n    code: `(function f (if true (into 2 {}) (+ 2 2)))`,\r\n    err: [\"Type\"],\r\n  },\r\n  { name: \"Parser arity error 1\", code: `(abs)`, err: [\"Parse\"] },\r\n];\r\n\r\nexport function doTests(\r\n  invoke: (\r\n    ctx: Ctx,\r\n    code: string,\r\n    invokeId: string,\r\n    print: boolean,\r\n  ) => InvokeResult,\r\n  terse = true,\r\n): string[] {\r\n  const results: {\r\n    okErr: boolean;\r\n    okOut: boolean;\r\n    elapsedMs: number;\r\n    display: string;\r\n  }[] = [];\r\n  for (let t = 0; t < len(tests); ++t) {\r\n    const { name, code, err, out } = tests[t];\r\n    const state: State = {\r\n      dict: new Map<string, Val>(),\r\n      output: \"\",\r\n    };\r\n    const env: Env = { funcs: {}, vars: {} };\r\n    const startTime = getTimeMs();\r\n    const valOrErrs = invoke(\r\n      {\r\n        get: (key: string) => get(state, key),\r\n        set: (key: string, val: Val) => set(state, key, val),\r\n        print: (str, withNewLine) => {\r\n          state.output += str + (withNewLine ? \"\\n\" : \"\");\r\n        },\r\n        exe: (name: string, args: Val[]) => exe(state, name, args),\r\n        functions: [],\r\n        env,\r\n        loopBudget: 10000,\r\n        rangeBudget: 1000,\r\n        callBudget: 1000,\r\n        recurBudget: 10000,\r\n      },\r\n      code,\r\n      code,\r\n      true,\r\n    );\r\n    const errors = valOrErrs.kind === \"errors\" ? valOrErrs.errors : [];\r\n    const okErr = (err || []).join() === errors.map(({ e }) => e).join();\r\n    const okOut = !out || trim(state.output) === out;\r\n    const elapsedMs = getTimeMs() - startTime;\r\n    const [tNum, tName, tElapsed, tOutput, tErrors] = [\r\n      padEnd(`${t + 1}`, 3),\r\n      padEnd(name, 24),\r\n      padEnd(`${round(elapsedMs)}ms`, 6),\r\n      okOut || out + \"\\t!=\\t\" + trim(state.output),\r\n      okErr ||\r\n        errors.map(\r\n          ({ e, m, errCtx: { line, col } }) => `${e} ${line}:${col}: ${m}`,\r\n        ),\r\n    ];\r\n    results.push({\r\n      okErr,\r\n      okOut,\r\n      elapsedMs,\r\n      display: `${tNum} ${tName} ${tElapsed} ${tOutput} ${tErrors}`,\r\n    });\r\n  }\r\n  const totalMs = results.reduce((sum, { elapsedMs }) => sum + elapsedMs, 0);\r\n  const numPassed = len(results.filter(({ okOut, okErr }) => okOut && okErr));\r\n  return concat(\r\n    results.filter(r => !terse || !r.okOut || !r.okErr).map(r => r.display),\r\n    [`---- ${numPassed}/${len(results)} tests passed in ${round(totalMs)}ms.`],\r\n  );\r\n}\r\n","import { len, slice, splice } from \"./poly-fills\";\r\nimport { assertUnreachable, Dict, Func, InvokeError, Val } from \"./types\";\r\n\r\nexport const num = ({ v }: Val) => v as number;\r\nexport const str = ({ v }: Val) => v as string;\r\nexport const vec = ({ v }: Val) => v as Val[];\r\nexport const dic = ({ v }: Val) => v as Dict;\r\n\r\nexport const isVecEqual = (a: Val[], b: Val[]): boolean =>\r\n  len(a) === len(b) && !a.some((x, i) => !isEqual(x, b[i]));\r\n\r\nexport const isEqual = (a: Val, b: Val) => {\r\n  if (a.t === \"wild\" || b.t === \"wild\") {\r\n    return true;\r\n  }\r\n  if (a.t !== b.t) {\r\n    return false;\r\n  }\r\n  switch (a.t) {\r\n    case \"null\":\r\n      return true;\r\n    case \"bool\":\r\n      return a.v === b.v;\r\n    case \"num\":\r\n      return a.v === b.v;\r\n    case \"vec\":\r\n      return isVecEqual(a.v, vec(b));\r\n    case \"dict\": {\r\n      const bd = dic(b);\r\n      return len(a.v.keys) === len(bd.keys) && isVecEqual(a.v.keys, bd.keys);\r\n    }\r\n    case \"str\":\r\n    case \"ref\":\r\n    case \"key\":\r\n    case \"func\":\r\n      return str(a) === str(b);\r\n    case \"clo\":\r\n      return (<Func>a.v).name === (<Func>b.v).name;\r\n    case \"ext\":\r\n      return a.v === b.v;\r\n  }\r\n  return assertUnreachable(a);\r\n};\r\n\r\nexport const stringify = (vals: Val[]) =>\r\n  vals.reduce((cat, v) => cat + val2str(v), \"\");\r\n\r\nconst quoteStr = (str: string) =>\r\n  str\r\n    .split(\"\")\r\n    .map(ch => (ch === '\"' ? '\\\\\"' : ch))\r\n    .join(\"\");\r\n\r\nexport const val2str = (val: Val): string => {\r\n  const quoted = (v: Val) =>\r\n    v.t === \"str\" ? `\"${quoteStr(v.v)}\"` : val2str(v);\r\n  if (val.t === \"clo\") {\r\n    return val.v.name ?? \"\";\r\n  } else if (val.t === \"vec\") {\r\n    return `[${val.v.map(quoted).join(\" \")}]`;\r\n  } else if (val.t === \"dict\") {\r\n    const { keys, vals } = val.v;\r\n    const [ks, vs] = [keys.map(quoted), vals.map(quoted)];\r\n    const entries = ks.map((k, i) => `${k} ${vs[i]}`);\r\n    return `{${entries.join(\", \")}}`;\r\n  } else if (val.t === \"null\") {\r\n    return \"null\";\r\n  } else if (val.t === \"wild\") {\r\n    return \"_\";\r\n  }\r\n  return `${val.v}`;\r\n};\r\n\r\nexport const asArray = (val: Val): Val[] =>\r\n  val.t === \"vec\"\r\n    ? slice(val.v)\r\n    : val.t === \"str\"\r\n    ? [...val.v].map(s => ({ t: \"str\", v: s }))\r\n    : val.t === \"dict\"\r\n    ? val.v.keys.map((k, i) => ({\r\n        t: \"vec\",\r\n        v: [k, val.v.vals[i]],\r\n      }))\r\n    : [];\r\n\r\nexport const toDict = (args: Val[]): Val => {\r\n  if (len(args) % 2 === 1) {\r\n    args.pop();\r\n  }\r\n  const keys = args.filter((_, i) => i % 2 === 0);\r\n  const vals = args.filter((_, i) => i % 2 === 1);\r\n  const ddKeys: Val[] = [],\r\n    ddVals: Val[] = [];\r\n  keys.forEach((key, i) => {\r\n    const existingIdx = ddKeys.findIndex(k => isEqual(k, key));\r\n    if (existingIdx === -1) {\r\n      ddKeys.push(key);\r\n      ddVals.push(vals[i]);\r\n    } else {\r\n      ddVals[existingIdx] = vals[i];\r\n    }\r\n  });\r\n  return {\r\n    t: \"dict\",\r\n    v: { keys: ddKeys, vals: ddVals },\r\n  };\r\n};\r\n\r\nexport const dictGet = ({ keys, vals }: Dict, key: Val) => {\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  return idx === -1 ? <Val>{ t: \"null\", v: undefined } : vals[idx];\r\n};\r\n\r\nexport const dictSet = ({ keys, vals }: Dict, key: Val, val: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    nVals[idx] = val;\r\n  } else {\r\n    nKeys.push(key);\r\n    nVals.push(val);\r\n  }\r\n  return <Dict>{ keys: nKeys, vals: nVals };\r\n};\r\n\r\nexport const dictDrop = ({ keys, vals }: Dict, key: Val) => {\r\n  const [nKeys, nVals] = [slice(keys), slice(vals)];\r\n  const idx = keys.findIndex(k => isEqual(k, key));\r\n  if (idx !== -1) {\r\n    splice(nKeys, idx, 1);\r\n    splice(nVals, idx, 1);\r\n  }\r\n  return <Val>{ t: \"dict\", v: <Dict>{ keys: nKeys, vals: nVals } };\r\n};\r\n\r\nexport function errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\n/** Replaces or sets index or key/value with another value in a string or\r\n * dictionary */\r\nexport function pathSet(path: Val[], replacement: Val, coll: Val): Val {\r\n  //If we're at the end of the path or it's a non-number index for non-dict\r\n  if (\r\n    !len(path) ||\r\n    (coll.t !== \"vec\" && coll.t !== \"dict\") ||\r\n    (coll.t === \"vec\" &&\r\n      (path[0].t !== \"num\" || path[0].v < 0 || path[0].v > len(coll.v)))\r\n  ) {\r\n    return coll;\r\n  }\r\n  if (coll.t === \"vec\") {\r\n    const vecCopy = slice(coll.v);\r\n    const idx = num(path[0]);\r\n    if (len(path) === 1) {\r\n      vecCopy[idx] = replacement;\r\n      return { t: \"vec\", v: vecCopy };\r\n    }\r\n    vecCopy[idx] = pathSet(slice(path, 1), replacement, vecCopy[idx]);\r\n    return { t: \"vec\", v: vecCopy };\r\n  }\r\n  if (len(path) === 1) {\r\n    return { t: \"dict\", v: dictSet(coll.v, path[0], replacement) };\r\n  }\r\n  return {\r\n    t: \"dict\",\r\n    v: dictSet(\r\n      coll.v,\r\n      path[0],\r\n      pathSet(slice(path, 1), replacement, dictGet(coll.v, path[0])),\r\n    ),\r\n  };\r\n}\r\n","export const insituxVersion = 220301;\r\nimport { asBoo } from \"./checks\";\r\nimport { arityCheck, keyOpErr, numOpErr, typeCheck, typeErr } from \"./checks\";\r\nimport { makeEnclosure } from \"./closure\";\r\nimport { parse } from \"./parse\";\r\nimport * as pf from \"./poly-fills\";\r\nconst { abs, sign, sqrt, floor, ceil, round, max, min, logn, log2, log10 } = pf;\r\nconst { cos, sin, tan, acos, asin, atan, sinh, cosh, tanh } = pf;\r\nconst { concat, has, flat, push, reverse, slice, splice, sortBy } = pf;\r\nconst { ends, slen, starts, sub, subIdx, substr, upperCase, lowerCase } = pf;\r\nconst { trim, trimStart, trimEnd, charCode, codeChar, strIdx, replace } = pf;\r\nconst { getTimeMs, randInt, randNum } = pf;\r\nconst { isNum, len, objKeys, range, toNum, isArray } = pf;\r\nimport { doTests } from \"./test\";\r\nimport { assertUnreachable, InvokeError, InvokeResult } from \"./types\";\r\nimport { ExternalFunction, ExternalHandler, syntaxes } from \"./types\";\r\nimport { Ctx, Dict, ErrCtx, Func, Ins, Val, ops, typeNames } from \"./types\";\r\nimport { asArray, isEqual, num, str, stringify, val2str, vec } from \"./val\";\r\nimport { dic, dictDrop, dictGet, dictSet, toDict, pathSet } from \"./val\";\r\n\r\nconst externalOps: { [name: string]: ExternalHandler } = {};\r\nlet stack: Val[] = [];\r\nlet letsStack: { [key: string]: Val }[] = [];\r\nlet lets: typeof letsStack[0] = {};\r\nlet recurArgs: undefined | Val[];\r\nconst _boo = (v: boolean) => stack.push({ t: \"bool\", v });\r\nconst _num = (v: number) => stack.push({ t: \"num\", v });\r\nconst _str = (v = \"\") => stack.push({ t: \"str\", v });\r\nconst _vec = (v: Val[] = []) => stack.push({ t: \"vec\", v });\r\nconst _dic = (v: Dict) => stack.push({ t: \"dict\", v });\r\nconst _nul = () => stack.push({ t: \"null\", v: undefined });\r\nconst _fun = (v: string) => stack.push({ t: \"func\", v });\r\n\r\nfunction exeOp(\r\n  op: string,\r\n  args: Val[],\r\n  ctx: Ctx,\r\n  errCtx: ErrCtx,\r\n): InvokeError[] | undefined {\r\n  const tErr = (msg: string) => [typeErr(msg, errCtx)];\r\n\r\n  switch (op) {\r\n    case \"str\":\r\n      stack.push({ t: \"str\", v: stringify(args) });\r\n      return;\r\n    case \"print\":\r\n    case \"print-str\":\r\n      ctx.print(stringify(args), op === \"print\");\r\n      _nul();\r\n      return;\r\n    case \"vec\":\r\n      _vec(args);\r\n      return;\r\n    case \"dict\":\r\n      stack.push(toDict(args));\r\n      return;\r\n    case \"len\":\r\n      _num(\r\n        args[0].t === \"str\"\r\n          ? slen(args[0].v)\r\n          : args[0].t === \"vec\"\r\n          ? len(args[0].v)\r\n          : len(dic(args[0]).keys),\r\n      );\r\n      return;\r\n    case \"to-num\":\r\n      if (isNum(args[0].v)) {\r\n        _num(toNum(args[0].v));\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    case \"to-key\":\r\n      stack.push({ t: \"key\", v: `:${val2str(args[0])}` });\r\n      return;\r\n    case \"to-vec\":\r\n      _vec(asArray(args[0]));\r\n      return;\r\n    case \"!\":\r\n      _boo(!asBoo(args[0]));\r\n      return;\r\n    case \"=\":\r\n    case \"!=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        if (isEqual(args[i - 1], args[i]) !== (op === \"=\")) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"-\":\r\n      _num(\r\n        len(args) === 1\r\n          ? -num(args[0])\r\n          : args.map(num).reduce((sum, n) => sum - n),\r\n      );\r\n      return;\r\n    case \"**\":\r\n      _num(num(args[0]) ** (len(args) === 1 ? 2 : num(args[1])));\r\n      return;\r\n    case \"+\":\r\n      _num(args.map(num).reduce((sum, n) => sum + n));\r\n      return;\r\n    case \"*\":\r\n      _num(args.map(num).reduce((sum, n) => sum * n));\r\n      return;\r\n    case \"/\":\r\n      _num(args.map(num).reduce((sum, n) => sum / n));\r\n      return;\r\n    case \"//\":\r\n      _num(args.map(num).reduce((sum, n) => floor(sum / n)));\r\n      return;\r\n    case \"fast=\":\r\n    case \"fast!=\":\r\n      _boo(isEqual(args[0], args[1]) === (op === \"fast=\"));\r\n      return;\r\n    case \"fast-\":\r\n      _num(<number>args[0].v - <number>args[1].v);\r\n      return;\r\n    case \"fast+\":\r\n      _num(<number>args[0].v + <number>args[1].v);\r\n      return;\r\n    case \"fast*\":\r\n      _num(<number>args[0].v * <number>args[1].v);\r\n      return;\r\n    case \"fast/\":\r\n      _num(<number>args[0].v / <number>args[1].v);\r\n      return;\r\n    case \"fast//\":\r\n      _num(floor(<number>args[0].v / <number>args[1].v));\r\n      return;\r\n    case \"fast<\":\r\n      _boo(<number>args[0].v < <number>args[1].v);\r\n      return;\r\n    case \"fast>\":\r\n      _boo(<number>args[0].v > <number>args[1].v);\r\n      return;\r\n    case \"fast<=\":\r\n      _boo(<number>args[0].v <= <number>args[1].v);\r\n      return;\r\n    case \"fast>=\":\r\n      _boo(<number>args[0].v >= <number>args[1].v);\r\n      return;\r\n    case \"rem\":\r\n      _num(args.map(num).reduce((sum, n) => sum % n));\r\n      return;\r\n    case \"min\":\r\n      _num(args.map(num).reduce((sum, n) => min(sum, n)));\r\n      return;\r\n    case \"max\":\r\n      _num(args.map(num).reduce((sum, n) => max(sum, n)));\r\n      return;\r\n    case \"<\":\r\n    case \">\":\r\n    case \"<=\":\r\n    case \">=\":\r\n      for (let i = 1, lim = len(args); i < lim; ++i) {\r\n        const [a, b] = [<number>args[i - 1].v, <number>args[i].v];\r\n        if (\r\n          (op === \"<\" && a >= b) ||\r\n          (op === \">\" && a <= b) ||\r\n          (op === \"<=\" && a > b) ||\r\n          (op === \">=\" && a < b)\r\n        ) {\r\n          _boo(false);\r\n          return;\r\n        }\r\n      }\r\n      _boo(true);\r\n      return;\r\n    case \"inc\":\r\n      _num(<number>args[0].v + 1);\r\n      return;\r\n    case \"dec\":\r\n      _num(<number>args[0].v - 1);\r\n      return;\r\n    case \"abs\":\r\n      _num(abs(<number>args[0].v));\r\n      return;\r\n    case \"round\":\r\n      if (len(args) === 2) {\r\n        const x = 10 ** <number>args[0].v;\r\n        _num(round(<number>args[1].v * x) / x);\r\n      } else {\r\n        _num(round(<number>args[0].v));\r\n      }\r\n      return;\r\n    case \"sin\":\r\n    case \"cos\":\r\n    case \"tan\":\r\n    case \"sqrt\":\r\n    case \"floor\":\r\n    case \"ceil\":\r\n    case \"logn\":\r\n    case \"log2\":\r\n    case \"log10\": {\r\n      const f = { sin, cos, tan, sqrt, floor, ceil, logn, log2, log10 }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"asin\":\r\n    case \"acos\":\r\n    case \"atan\":\r\n    case \"sinh\":\r\n    case \"cosh\":\r\n    case \"tanh\": {\r\n      const f = { asin, acos, atan, sinh, cosh, tanh }[op];\r\n      _num(f(num(args[0])));\r\n      return;\r\n    }\r\n    case \"and\":\r\n      _boo(args.every(asBoo));\r\n      return;\r\n    case \"or\":\r\n      _boo(args.some(asBoo));\r\n      return;\r\n    case \"xor\":\r\n      if (asBoo(args[0]) !== asBoo(args[1])) {\r\n        stack.push(asBoo(args[0]) ? args[0] : args[1]);\r\n      } else {\r\n        _boo(false);\r\n      }\r\n      return;\r\n    case \"&\":\r\n    case \"|\":\r\n    case \"^\":\r\n    case \"<<\":\r\n    case \">>\":\r\n    case \">>>\":\r\n      const [a, b] = [num(args[0]), num(args[1])];\r\n      _num(\r\n        op === \"&\"\r\n          ? a & b\r\n          : op === \"|\"\r\n          ? a | b\r\n          : op === \"^\"\r\n          ? a ^ b\r\n          : op === \"<<\"\r\n          ? a << b\r\n          : op === \">>\"\r\n          ? a >> b\r\n          : a >>> b,\r\n      );\r\n      return;\r\n    case \"~\":\r\n      _num(~num(args[0]));\r\n      return;\r\n    case \"odd?\":\r\n    case \"even?\":\r\n      _boo(num(args[0]) % 2 === (op === \"odd?\" ? 1 : 0));\r\n      return;\r\n    case \"pos?\":\r\n    case \"neg?\":\r\n    case \"zero?\": {\r\n      const n = num(args[0]);\r\n      _boo(op === \"pos?\" ? n > 0 : op === \"neg?\" ? n < 0 : !n);\r\n      return;\r\n    }\r\n    case \"null?\":\r\n    case \"num?\":\r\n    case \"bool?\":\r\n    case \"str?\":\r\n    case \"dict?\":\r\n    case \"vec?\":\r\n    case \"key?\":\r\n    case \"func?\":\r\n    case \"wild?\":\r\n    case \"ext?\": {\r\n      const { t } = args[0];\r\n      _boo(\r\n        (op === \"func?\" && (t === \"func\" || t === \"clo\")) ||\r\n          substr(op, 0, slen(op) - 1) === t,\r\n      );\r\n      return;\r\n    }\r\n    case \"type-of\":\r\n      _str(args[0].t);\r\n      return;\r\n    case \"substr?\":\r\n      _boo(sub(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"idx\": {\r\n      let i = -1;\r\n      if (args[0].t === \"str\") {\r\n        if (args[1].t !== \"str\") {\r\n          return tErr(\"strings can only contain strings\");\r\n        }\r\n        i = subIdx(args[1].v, args[0].v);\r\n      } else if (args[0].t === \"vec\") {\r\n        i = args[0].v.findIndex(a => isEqual(a, args[1]));\r\n      }\r\n      if (i === -1) {\r\n        _nul();\r\n      } else {\r\n        _num(i);\r\n      }\r\n      return;\r\n    }\r\n    case \"set-at\": {\r\n      const [pathVal, replacement, coll] = args;\r\n      stack.push(pathSet(vec(pathVal), replacement, coll));\r\n      return;\r\n    }\r\n    case \"map\":\r\n    case \"for\":\r\n    case \"reduce\":\r\n    case \"filter\":\r\n    case \"remove\":\r\n    case \"find\":\r\n    case \"count\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \"map\" || op === \"for\") {\r\n        const badArg = args.findIndex(\r\n          ({ t }) => t !== \"vec\" && t !== \"str\" && t !== \"dict\",\r\n        );\r\n        if (badArg !== -1) {\r\n          const badType = typeNames[args[badArg].t];\r\n          return tErr(\r\n            `argument ${\r\n              badArg + 2\r\n            } must be either: string, vector, dictionary, not ${badType}`,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (op === \"for\") {\r\n        const arrays = args.map(asArray);\r\n        const lims = arrays.map(len);\r\n        const divisors = lims.map((_, i) =>\r\n          slice(lims, 0, i + 1).reduce((sum, l) => sum * l),\r\n        );\r\n        divisors.unshift(1);\r\n        const lim = divisors.pop()!;\r\n        if (lim > ctx.loopBudget) {\r\n          return [{ e: \"Budget\", m: \"would exceed loop budget\", errCtx }];\r\n        }\r\n        const array: Val[] = [];\r\n        for (let t = 0; t < lim; ++t) {\r\n          const argIdxs = divisors.map((d, i) => floor((t / d) % lims[i]));\r\n          const errors = closure(arrays.map((a, i) => a[argIdxs[i]]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op === \"map\") {\r\n        const arrays = args.map(asArray);\r\n        const shortest = min(...arrays.map(len));\r\n        const array: Val[] = [];\r\n        for (let i = 0; i < shortest; ++i) {\r\n          const errors = closure(arrays.map(a => a[i]));\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          array.push(stack.pop()!);\r\n        }\r\n        _vec(array);\r\n        return;\r\n      }\r\n\r\n      if (op !== \"reduce\") {\r\n        const arrArg = args.shift()!;\r\n        const array = asArray(arrArg);\r\n        const isRemove = op === \"remove\",\r\n          isFind = op === \"find\",\r\n          isCount = op === \"count\";\r\n        const filtered: Val[] = [];\r\n        let count = 0;\r\n        for (let i = 0, lim = len(array); i < lim; ++i) {\r\n          const errors = closure([array[i], ...args]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const b = asBoo(stack.pop()!);\r\n          if (isCount) {\r\n            count += b ? 1 : 0;\r\n          } else if (isFind) {\r\n            if (b) {\r\n              stack.push(array[i]);\r\n              return;\r\n            }\r\n          } else if (b !== isRemove) {\r\n            filtered.push(array[i]);\r\n          }\r\n        }\r\n        switch (op) {\r\n          case \"count\":\r\n            _num(count);\r\n            return;\r\n          case \"find\":\r\n            _nul();\r\n            return;\r\n        }\r\n        if (arrArg.t === \"str\") {\r\n          _str(filtered.map(v => val2str(v)).join(\"\"));\r\n        } else if (arrArg.t === \"dict\") {\r\n          stack.push(toDict(flat(filtered.map(v => <Val[]>v.v))));\r\n        } else {\r\n          _vec(filtered);\r\n        }\r\n        return;\r\n      }\r\n      const arrayVal = args.pop()!;\r\n      if (!has([\"vec\", \"dict\", \"str\"], arrayVal.t)) {\r\n        return tErr(\r\n          `must reduce either: string, vector, dictionary, not ${\r\n            typeNames[arrayVal.t]\r\n          }`,\r\n        );\r\n      }\r\n      const array = asArray(arrayVal);\r\n\r\n      if (!len(array)) {\r\n        if (len(args)) {\r\n          stack.push(args[0]);\r\n        } else {\r\n          _vec();\r\n        }\r\n        return;\r\n      }\r\n      if (len(array) < 2 && !len(args)) {\r\n        push(stack, array);\r\n        return;\r\n      }\r\n\r\n      let reduction: Val = (len(args) ? args : array).shift()!;\r\n      for (let i = 0, lim = len(array); i < lim; ++i) {\r\n        const errors = closure([reduction, array[i]]);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        reduction = stack.pop()!;\r\n      }\r\n      stack.push(reduction);\r\n      return;\r\n    }\r\n    case \"repeat\": {\r\n      const toRepeat = args.shift()!;\r\n      const result: Val[] = [];\r\n      const count = num(args[0]);\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      if (toRepeat.t === \"func\" || toRepeat.t === \"clo\") {\r\n        const closure = getExe(ctx, toRepeat, errCtx);\r\n        for (let i = 0; i < count; ++i) {\r\n          const errors = closure([{ t: \"num\", v: i }]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          result.push(stack.pop()!);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < count; ++i) {\r\n          result.push(toRepeat);\r\n        }\r\n      }\r\n      _vec(result);\r\n      return;\r\n    }\r\n    case \"->\": {\r\n      stack.push(args.shift()!);\r\n      for (let i = 0, lim = len(args); i < lim; ++i) {\r\n        const errors = getExe(ctx, args[i], errCtx)([stack.pop()!]);\r\n        if (errors) {\r\n          errors.forEach(err => (err.m = `-> arg ${i + 2}: ${err.m}`));\r\n          return errors;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"rand-int\":\r\n    case \"rand\":\r\n      {\r\n        const nArgs = len(args);\r\n        const [a, b] = [\r\n          nArgs < 2 ? 0 : num(args[0]),\r\n          nArgs === 0\r\n            ? 1 + toNum(op === \"rand-int\")\r\n            : nArgs === 1\r\n            ? num(args[0])\r\n            : num(args[1]),\r\n        ];\r\n        _num(op === \"rand-int\" ? randInt(a, b) : randNum(a, b));\r\n      }\r\n      return;\r\n    case \"do\":\r\n    case \"val\":\r\n      stack.push(op === \"do\" ? args.pop()! : args.shift()!);\r\n      return;\r\n    case \".\":\r\n    case \"..\":\r\n    case \"...\": {\r\n      const closure = getExe(ctx, args.shift()!, errCtx);\r\n      if (op === \".\") {\r\n        return closure(args);\r\n      }\r\n      let flatArgs: Val[] = args;\r\n      if (op === \"..\") {\r\n        flatArgs = flat(args.map(a => (a.t === \"vec\" ? a.v : [a])));\r\n      } else {\r\n        const a = flatArgs.pop()!;\r\n        push(flatArgs, flat([a.t === \"vec\" ? a.v : [a]]));\r\n      }\r\n      return closure(flatArgs);\r\n    }\r\n    case \"into\": {\r\n      if (args[0].t === \"vec\") {\r\n        _vec(concat(args[0].v, asArray(args[1])));\r\n      } else {\r\n        if (args[1].t === \"vec\") {\r\n          stack.push(\r\n            toDict(concat(flat(asArray(args[0]).map(vec)), args[1].v)),\r\n          );\r\n        } else {\r\n          const { keys, vals } = dic(args[0]);\r\n          const d1 = dic(args[1]);\r\n          _dic({ keys: concat(keys, d1.keys), vals: concat(vals, d1.vals) });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case \"omit\":\r\n      stack.push(dictDrop(dic(args[1]), args[0]));\r\n      return;\r\n    case \"assoc\":\r\n      _dic(dictSet(dic(args[2]), args[0], args[1]));\r\n      return;\r\n    case \"append\":\r\n      _vec(concat(vec(args[1]), [args[0]]));\r\n      return;\r\n    case \"prepend\":\r\n      _vec(concat([args[0]], vec(args[1])));\r\n      return;\r\n    case \"insert\": {\r\n      const v = vec(args[2]);\r\n      let n = num(args[1]);\r\n      if (n === 0) {\r\n        _vec(concat([args[0]], v));\r\n      } else if (n === -1) {\r\n        _vec(concat(v, [args[0]]));\r\n      } else {\r\n        n = n > 0 ? min(n, len(v)) : max(len(v) + 1 + n, 0);\r\n        _vec(concat(concat(slice(v, 0, n), [args[0]]), slice(v, n)));\r\n      }\r\n      return;\r\n    }\r\n    case \"sect\": {\r\n      const v = args[0];\r\n      const vlen = v.t === \"vec\" ? len(v.v) : slen(str(v));\r\n      let a = 0,\r\n        b = vlen;\r\n      switch (len(args)) {\r\n        case 1:\r\n          a = 1;\r\n          break;\r\n        case 2: {\r\n          const del = num(args[1]);\r\n          if (del < 0) {\r\n            b += del;\r\n          } else {\r\n            a += del;\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const skip = num(args[1]);\r\n          const take = num(args[2]);\r\n          a = skip < 0 ? vlen + skip + (take < 0 ? take : 0) : a + skip;\r\n          b = (take < 0 ? b : a) + take;\r\n          break;\r\n        }\r\n      }\r\n      a = max(a, 0);\r\n      b = min(b, vlen);\r\n      if (a > b) {\r\n        (v.t === \"vec\" ? _vec : _str)();\r\n        return;\r\n      }\r\n      if (v.t === \"vec\") {\r\n        _vec(slice(v.v, a, b));\r\n      } else {\r\n        _str(substr(str(args[0]), a, b - a));\r\n      }\r\n      return;\r\n    }\r\n    case \"reverse\":\r\n      if (args[0].t === \"str\") {\r\n        _str(stringify(reverse(asArray(args[0]))));\r\n      } else {\r\n        _vec(reverse(asArray(args[0])));\r\n      }\r\n      return;\r\n    case \"flatten\": {\r\n      const src = vec(args[0]);\r\n      const flattened: Val[] = [];\r\n      const recur = (vec: Val[]): void =>\r\n        vec.forEach(v => (v.t === \"vec\" ? recur(v.v) : flattened.push(v)));\r\n      recur(src);\r\n      _vec(flattened);\r\n      return;\r\n    }\r\n    case \"shuffle\": {\r\n      const arr = slice(vec(args[0]));\r\n      for (let i = len(arr) - 1; i; --i) {\r\n        const j = floor(randInt(0, i + 1));\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n      }\r\n      _vec(arr);\r\n      return;\r\n    }\r\n    case \"sort\":\r\n    case \"sort-by\": {\r\n      const src = asArray(args[op === \"sort\" ? 0 : 1]);\r\n      if (!len(src)) {\r\n        _vec();\r\n        return;\r\n      }\r\n      const mapped: Val[][] = [];\r\n      if (op === \"sort\") {\r\n        push(\r\n          mapped,\r\n          src.map(v => [v, v]),\r\n        );\r\n      } else {\r\n        const closure = getExe(ctx, args[0], errCtx);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          mapped.push([src[i], stack.pop()!]);\r\n        }\r\n      }\r\n      const okT = mapped[0][1].t;\r\n      if (mapped.some(([_, { t }]) => t !== okT || !has([\"num\", \"str\"], t))) {\r\n        return tErr(\"can only sort by all number or all string\");\r\n      }\r\n      if (okT === \"num\") {\r\n        sortBy(mapped, ([x, a], [y, b]) => (num(a) > num(b) ? 1 : -1));\r\n      } else {\r\n        sortBy(mapped, ([x, a], [y, b]) => (str(a) > str(b) ? 1 : -1));\r\n      }\r\n      _vec(mapped.map(([v]) => v));\r\n      return;\r\n    }\r\n    case \"group-by\": {\r\n      const closure = getExe(ctx, args[0], errCtx);\r\n      let groups: Dict = { keys: [], vals: [] };\r\n      const isDic = args[1].t === \"dict\";\r\n      if (isDic) {\r\n        const { keys, vals } = dic(args[1]);\r\n        for (let i = 0, lim = len(keys); i < lim; ++i) {\r\n          const errors = closure([keys[i], vals[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const v = stack.pop()!;\r\n          const existingKey = groups.keys.findIndex(k => isEqual(k, v));\r\n          if (existingKey === -1) {\r\n            groups.keys.push(v);\r\n            groups.vals.push({\r\n              t: \"dict\",\r\n              v: { keys: [keys[i]], vals: [vals[i]] },\r\n            });\r\n          } else {\r\n            const subDict = dic(groups.vals[existingKey]);\r\n            subDict.keys.push(keys[i]);\r\n            subDict.vals.push(vals[i]);\r\n          }\r\n        }\r\n      } else {\r\n        const src = asArray(args[1]);\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const v = stack.pop()!;\r\n          const existingKey = groups.keys.findIndex(k => isEqual(k, v));\r\n          if (existingKey === -1) {\r\n            groups.keys.push(v);\r\n            groups.vals.push({ t: \"vec\", v: [src[i]] });\r\n          } else {\r\n            const subVec = vec(groups.vals[existingKey]);\r\n            subVec.push(src[i]);\r\n          }\r\n        }\r\n      }\r\n      _dic(groups);\r\n      return;\r\n    }\r\n    case \"part-by\": {\r\n      const closure = getExe(ctx, args[0], errCtx);\r\n      const isDic = args[1].t === \"dict\";\r\n      if (isDic) {\r\n        const { keys, vals } = dic(args[1]);\r\n        const parted: Dict[] = [\r\n          { keys: [], vals: [] },\r\n          { keys: [], vals: [] },\r\n        ];\r\n        for (let i = 0, lim = len(keys); i < lim; ++i) {\r\n          const errors = closure([keys[i], vals[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          const p = asBoo(stack.pop()!) ? 0 : 1;\r\n          parted[p].keys.push(keys[i]);\r\n          parted[p].vals.push(vals[i]);\r\n        }\r\n        _vec(parted.map(v => <Val>{ t: \"dict\", v }));\r\n      } else {\r\n        const src = asArray(args[1]);\r\n        const parted: Val[][] = [[], []];\r\n        for (let i = 0, lim = len(src); i < lim; ++i) {\r\n          const errors = closure([src[i]]);\r\n          if (errors) {\r\n            return errors;\r\n          }\r\n          parted[asBoo(stack.pop()!) ? 0 : 1].push(src[i]);\r\n        }\r\n        _vec(parted.map(v => <Val>{ t: \"vec\", v }));\r\n      }\r\n      return;\r\n    }\r\n    case \"frequencies\": {\r\n      const src = asArray(args[0]);\r\n      const distinct: Val[] = [];\r\n      const counts: number[] = [];\r\n      src.forEach(x => {\r\n        const i = distinct.findIndex(y => isEqual(x, y));\r\n        if (i !== -1) {\r\n          ++counts[i];\r\n        } else {\r\n          distinct.push(x);\r\n          counts.push(1);\r\n        }\r\n      });\r\n      _dic({ keys: distinct, vals: counts.map(v => <Val>{ t: \"num\", v }) });\r\n      return;\r\n    }\r\n    case \"distinct\": {\r\n      const arr = len(args) === 1 && args[0].t === \"vec\" ? vec(args[0]) : args;\r\n      const distinct: Val[] = [];\r\n      arr.forEach(a => {\r\n        if (!distinct.some(v => isEqual(a, v))) {\r\n          distinct.push(a);\r\n        }\r\n      });\r\n      _vec(distinct);\r\n      return;\r\n    }\r\n    case \"range\": {\r\n      const [a, b, s] = args.map(num);\r\n      const edgeCase = s && s < 0 && a < b; //e.g. 1 4 -1\r\n      const [x, y] =\r\n        len(args) > 1 ? (edgeCase ? [b - 1, a - 1] : [a, b]) : [0, a];\r\n      const step = sign((y - x) * (s || 1)) * (s || 1);\r\n      const count = ceil(abs((y - x) / step));\r\n      if (!count) {\r\n        _vec([]);\r\n        return;\r\n      }\r\n      if (count > ctx.rangeBudget) {\r\n        return [{ e: \"Budget\", m: \"would exceed range budget\", errCtx }];\r\n      }\r\n      ctx.rangeBudget -= count;\r\n      const nums = range(count).map(n => n * step + x);\r\n      _vec(nums.map(v => <Val>{ t: \"num\", v }));\r\n      return;\r\n    }\r\n    case \"empty?\":\r\n      _boo(!len(asArray(args[0])));\r\n      return;\r\n    case \"keys\":\r\n    case \"vals\":\r\n      _vec(dic(args[0])[op === \"keys\" ? \"keys\" : \"vals\"]);\r\n      return;\r\n    case \"split\":\r\n      _vec(\r\n        str(args[1])\r\n          .split(str(args[0]))\r\n          .map(v => <Val>{ t: \"str\", v }),\r\n      );\r\n      return;\r\n    case \"join\":\r\n      _str(asArray(args[1]).map(val2str).join(str(args[0])));\r\n      return;\r\n    case \"replace\":\r\n      _str(replace(str(args[2]), str(args[0]), str(args[1])));\r\n      return;\r\n    case \"starts?\":\r\n    case \"ends?\":\r\n      _boo((op === \"starts?\" ? starts : ends)(str(args[1]), str(args[0])));\r\n      return;\r\n    case \"upper-case\":\r\n    case \"lower-case\":\r\n    case \"trim\":\r\n    case \"trim-start\":\r\n    case \"trim-end\":\r\n      _str(\r\n        (op === \"upper-case\"\r\n          ? upperCase\r\n          : op === \"lower-case\"\r\n          ? lowerCase\r\n          : op === \"trim\"\r\n          ? trim\r\n          : op === \"trim-start\"\r\n          ? trimStart\r\n          : trimEnd)(str(args[0])),\r\n      );\r\n      return;\r\n    case \"str*\": {\r\n      const text = str(args[0]);\r\n      _str(\r\n        range(max(ceil(num(args[1])), 0))\r\n          .map(n => text)\r\n          .join(\"\"),\r\n      );\r\n      return;\r\n    }\r\n    case \"char-code\": {\r\n      if (args[0].t === \"str\") {\r\n        const n = len(args) > 1 ? num(args[1]) : 0;\r\n        const s = str(args[0]);\r\n        if (slen(s) <= n || n < 0) {\r\n          _nul();\r\n        } else {\r\n          _num(charCode(strIdx(s, n)));\r\n        }\r\n      } else {\r\n        _str(codeChar(num(args[0])));\r\n      }\r\n      return;\r\n    }\r\n    case \"time\":\r\n      _num(getTimeMs());\r\n      return;\r\n    case \"version\":\r\n      _num(insituxVersion);\r\n      return;\r\n    case \"tests\":\r\n      _str(doTests(invoke, !(len(args) && asBoo(args[0]))).join(\"\\n\"));\r\n      return;\r\n    case \"symbols\":\r\n      _vec(symbols(ctx, false).map(v => ({ t: \"str\", v })));\r\n      return;\r\n    case \"eval\": {\r\n      delete ctx.env.funcs[\"entry\"];\r\n      const sLen = len(stack);\r\n      const invokeId = `${errCtx.invokeId} eval`;\r\n      const errors = parseAndExe(ctx, str(args[0]), invokeId);\r\n      if (errors) {\r\n        return [\r\n          { e: \"Eval\", m: \"error within evaluated code\", errCtx },\r\n          ...errors,\r\n        ];\r\n      }\r\n      if (sLen === len(stack)) {\r\n        _nul();\r\n      }\r\n      return;\r\n    }\r\n    case \"about\": {\r\n      const func = str(args[0]);\r\n      const entry = ops[func];\r\n      if (!entry) {\r\n        _nul();\r\n        return;\r\n      }\r\n      const infos: Val[] = [];\r\n      const info = (what: string, val: Val) =>\r\n        infos.push({ t: \"key\", v: `:${what}` }, val);\r\n      const toStrVec = (v: (string | string[])[]): Val => ({\r\n        t: \"vec\",\r\n        v: v.map(typ =>\r\n          isArray(typ)\r\n            ? { t: \"vec\", v: typ.map(v => <Val>{ t: \"str\", v }) }\r\n            : { t: \"str\", v: typ },\r\n        ),\r\n      });\r\n      info(\"external?\", { t: \"bool\", v: !!entry.external });\r\n      if (entry.exactArity) {\r\n        info(\"exact-arity\", { t: \"num\", v: entry.exactArity });\r\n      } else {\r\n        if (entry.minArity) {\r\n          info(\"minimum-arity\", { t: \"num\", v: entry.minArity });\r\n        }\r\n        if (entry.maxArity) {\r\n          info(\"maximum-arity\", { t: \"num\", v: entry.maxArity });\r\n        }\r\n      }\r\n      if (entry.params || entry.numeric) {\r\n        info(\"in-types\", toStrVec(entry.params ? entry.params : [\"num\"]));\r\n      }\r\n      if (entry.returns || entry.numeric === true) {\r\n        info(\"out-types\", toStrVec(entry.returns ? entry.returns : [\"num\"]));\r\n      }\r\n      stack.push(toDict(infos));\r\n      return;\r\n    }\r\n    case \"recur\":\r\n      recurArgs = args;\r\n      return;\r\n    case \"reset\":\r\n      ctx.env.vars = {};\r\n      ctx.env.funcs = {};\r\n      letsStack = [];\r\n      _nul();\r\n      return;\r\n  }\r\n\r\n  return [{ e: \"Unexpected\", m: \"operation doesn't exist\", errCtx }];\r\n}\r\n\r\nconst monoArityError = (t: Val[\"t\"], errCtx: ErrCtx) => [\r\n  {\r\n    e: \"Arity\",\r\n    m: `${typeNames[t]} as op requires one sole argument`,\r\n    errCtx,\r\n  },\r\n];\r\n\r\nfunction checks(op: string, args: Val[], errCtx: ErrCtx, checkArity: boolean) {\r\n  //Optional arity check\r\n  if (checkArity) {\r\n    const violations = arityCheck(op, len(args), errCtx);\r\n    if (violations) {\r\n      return violations;\r\n    }\r\n  }\r\n  //Argument type check\r\n  const types = args.map(a => [a.t]);\r\n  const violations = typeCheck(op, types, errCtx);\r\n  return violations ? violations : false;\r\n}\r\n\r\nfunction getExe(\r\n  ctx: Ctx,\r\n  op: Val,\r\n  errCtx: ErrCtx,\r\n  checkArity = true,\r\n): (params: Val[]) => InvokeError[] | undefined {\r\n  if (op.t === \"str\" || op.t === \"func\") {\r\n    const name = op.v;\r\n    if (ops[name]) {\r\n      if (ops[name].external) {\r\n        return (params: Val[]) => {\r\n          const violations = checks(name, params, errCtx, checkArity);\r\n          if (violations) {\r\n            return violations;\r\n          }\r\n          const valOrErr = externalOps[name](params);\r\n          if (valOrErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valOrErr.err, errCtx }];\r\n          }\r\n          stack.push(valOrErr.value);\r\n        };\r\n      }\r\n      return (params: Val[]) =>\r\n        checks(name, params, errCtx, checkArity) ||\r\n        exeOp(name, params, ctx, errCtx);\r\n    }\r\n    if (name in ctx.env.funcs && name !== \"entry\") {\r\n      return (params: Val[]) => exeFunc(ctx, ctx.env.funcs[name], params);\r\n    }\r\n    if (name in ctx.env.vars) {\r\n      return getExe(ctx, ctx.env.vars[name], errCtx);\r\n    }\r\n    if (name in lets) {\r\n      return getExe(ctx, lets[name], errCtx);\r\n    }\r\n    if (starts(name, \"$\")) {\r\n      return (params: Val[]) => {\r\n        if (!len(params)) {\r\n          return monoArityError(op.t, errCtx);\r\n        }\r\n        const err = ctx.set(substr(name, 1), params[0]);\r\n        stack.push(params[0]);\r\n        return err ? [{ e: \"External\", m: err, errCtx }] : undefined;\r\n      };\r\n    }\r\n    return (params: Val[]) => {\r\n      const valAndErr = ctx.exe(name, params);\r\n      if (valAndErr.kind === \"val\") {\r\n        stack.push(valAndErr.value);\r\n        return;\r\n      }\r\n      return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n    };\r\n  } else if (op.t === \"clo\") {\r\n    return (params: Val[]) => exeFunc(ctx, op.v, params);\r\n  } else if (op.t === \"key\") {\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      if (params[0].t === \"dict\") {\r\n        stack.push(dictGet(dic(params[0]), op));\r\n      } else if (params[0].t === \"vec\") {\r\n        const found = vec(params[0]).find(v => isEqual(v, op));\r\n        stack.push(found ?? { t: \"null\", v: undefined });\r\n      } else {\r\n        return keyOpErr(errCtx, [params[0].t]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"num\") {\r\n    const n = floor(op.v);\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const a = params[0];\r\n      if (a.t !== \"str\" && a.t !== \"vec\" && a.t !== \"dict\") {\r\n        return numOpErr(errCtx, [a.t]);\r\n      }\r\n      const arr = asArray(a),\r\n        alen = len(arr);\r\n      if ((n >= 0 && n >= alen) || (n < 0 && -n > alen)) {\r\n        _nul();\r\n      } else if (n < 0) {\r\n        stack.push(arr[alen + n]);\r\n      } else {\r\n        stack.push(arr[n]);\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"vec\") {\r\n    const { v } = op;\r\n    return (params: Val[]) => {\r\n      if (!len(params)) {\r\n        return monoArityError(op.t, errCtx);\r\n      }\r\n      const found = v.find(val => isEqual(val, params[0]));\r\n      if (found) {\r\n        stack.push(found);\r\n      } else {\r\n        _nul();\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"dict\") {\r\n    const dict = op.v;\r\n    return (params: Val[]) => {\r\n      if (len(params) === 1) {\r\n        stack.push(dictGet(dict, params[0]));\r\n      } else if (len(params) === 2) {\r\n        _dic(dictSet(dict, params[0], params[1]));\r\n      } else {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for dictionary\", errCtx },\r\n        ];\r\n      }\r\n      return;\r\n    };\r\n  } else if (op.t === \"bool\") {\r\n    const cond = op.v;\r\n    return (params: Val[]) => {\r\n      if (!len(params) || len(params) > 2) {\r\n        return [\r\n          { e: \"Arity\", m: \"provide 1 or 2 arguments for boolean\", errCtx },\r\n        ];\r\n      }\r\n      stack.push(\r\n        cond\r\n          ? params[0]\r\n          : len(params) > 1\r\n          ? params[1]\r\n          : { t: \"null\", v: undefined },\r\n      );\r\n      return;\r\n    };\r\n  }\r\n  return _ => [\r\n    { e: \"Operation\", m: `${val2str(op)} is an invalid operation`, errCtx },\r\n  ];\r\n}\r\n\r\nfunction errorsToDict(errors: InvokeError[]) {\r\n  const newKey = (d: Dict, k: string, v: Val) =>\r\n    dictSet(d, { t: \"key\", v: k }, v);\r\n  return errors.map(({ e, m, errCtx }) => {\r\n    let dict = newKey({ keys: [], vals: [] }, \":e\", { t: \"str\", v: e });\r\n    dict = newKey(dict, \":m\", { t: \"str\", v: m });\r\n    dict = newKey(dict, \":line\", { t: \"num\", v: errCtx.line });\r\n    dict = newKey(dict, \":col\", { t: \"num\", v: errCtx.col });\r\n    return <Val>{ t: \"dict\", v: dict };\r\n  });\r\n}\r\n\r\nfunction destruct(args: Val[], shape: number[]): Val {\r\n  let arr: Val[] = args;\r\n  for (let a = 0, b = len(shape) - 1; a < b; ++a) {\r\n    const val = arr[shape[a]];\r\n    if (val.t === \"vec\") {\r\n      arr = val.v;\r\n    } else if (val.t === \"str\" && a + 1 === b && shape[a + 1] < slen(val.v)) {\r\n      return { t: \"str\", v: strIdx(val.v, shape[a + 1]) };\r\n    } else {\r\n      return { t: \"null\", v: undefined };\r\n    }\r\n  }\r\n  const pos = shape[len(shape) - 1];\r\n  return pos >= len(arr) ? { t: \"null\", v: undefined } : arr[pos];\r\n}\r\n\r\nfunction exeFunc(\r\n  ctx: Ctx,\r\n  func: Func,\r\n  args: Val[],\r\n  inClosure = false,\r\n): InvokeError[] | undefined {\r\n  --ctx.callBudget;\r\n  if (!inClosure) {\r\n    letsStack.push({});\r\n    lets = letsStack[len(letsStack) - 1];\r\n  }\r\n  const stackLen = len(stack);\r\n  for (let i = 0, lim = len(func.ins); i < lim; ++i) {\r\n    const ins = func.ins[i];\r\n    const { errCtx } = func.ins[i];\r\n\r\n    const tooManyLoops = ctx.loopBudget < 1;\r\n    if (tooManyLoops || ctx.callBudget < 1) {\r\n      return [\r\n        {\r\n          e: \"Budget\",\r\n          m: `${tooManyLoops ? \"looped\" : \"called\"} too many times`,\r\n          errCtx,\r\n        },\r\n      ];\r\n    }\r\n\r\n    switch (ins.typ) {\r\n      case \"val\":\r\n        stack.push(ins.value);\r\n        break;\r\n      case \"var\":\r\n        ctx.env.vars[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"let\":\r\n        lets[ins.value] = stack[len(stack) - 1];\r\n        break;\r\n      case \"dle\":\r\n      case \"dva\": {\r\n        const val = stack.pop()!;\r\n        let last: Val | undefined;\r\n        ins.value.forEach(({ name, position }) => {\r\n          if (ins.typ === \"dva\") {\r\n            last = ctx.env.vars[name] = destruct([val], position);\r\n          } else {\r\n            last = lets[name] = destruct([val], position);\r\n          }\r\n        });\r\n        stack.push(last!);\r\n        break;\r\n      }\r\n      case \"npa\":\r\n      case \"upa\": {\r\n        const paramIdx = ins.value;\r\n        if (paramIdx === -1) {\r\n          _vec(args);\r\n        } else if (len(args) <= paramIdx) {\r\n          _nul();\r\n        } else {\r\n          stack.push(args[paramIdx]);\r\n        }\r\n        break;\r\n      }\r\n      case \"dpa\":\r\n        stack.push(destruct(args, ins.value));\r\n        break;\r\n      case \"ref\": {\r\n        const name = ins.value;\r\n        if (ops[name]) {\r\n          _fun(name);\r\n        } else if (starts(name, \"$\")) {\r\n          const valAndErr = ctx.get(substr(name, 1));\r\n          if (valAndErr.kind === \"err\") {\r\n            return [{ e: \"External\", m: valAndErr.err, errCtx }];\r\n          }\r\n          stack.push(valAndErr.value);\r\n        } else if (name in ctx.env.vars) {\r\n          stack.push(ctx.env.vars[name]);\r\n        } else if (name in lets) {\r\n          stack.push(lets[name]);\r\n        } else if (name in ctx.env.funcs) {\r\n          _fun(name);\r\n        } else {\r\n          return [{ e: \"Reference\", m: `\"${name}\" did not exist`, errCtx }];\r\n        }\r\n        break;\r\n      }\r\n      case \"exa\":\r\n      case \"exe\": {\r\n        const closure = getExe(ctx, stack.pop()!, errCtx, ins.typ === \"exa\");\r\n        const nArgs = ins.value;\r\n        const params = splice(stack, len(stack) - nArgs, nArgs);\r\n        const errors = closure(params);\r\n        if (errors) {\r\n          //Find next catch statement\r\n          const nextCat = slice(func.ins, i).findIndex(\r\n            ins => ins.typ === \"cat\",\r\n          );\r\n          if (nextCat !== -1) {\r\n            i += nextCat;\r\n            lets[\"errors\"] = {\r\n              t: \"vec\",\r\n              v: errorsToDict(errors),\r\n            };\r\n            break;\r\n          }\r\n          return errors;\r\n        }\r\n        if (recurArgs) {\r\n          letsStack[len(letsStack) - 1] = {};\r\n          i = -1;\r\n          args = recurArgs;\r\n          recurArgs = undefined;\r\n          --ctx.recurBudget;\r\n          if (!ctx.recurBudget) {\r\n            return [{ e: \"Budget\", m: `recurred too many times`, errCtx }];\r\n          }\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n      case \"or\":\r\n        if (asBoo(stack[len(stack) - 1])) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      case \"mat\": {\r\n        const a = stack[len(stack) - 2];\r\n        if (!isEqual(a, stack.pop()!)) {\r\n          i += ins.value;\r\n        } else {\r\n          stack.pop();\r\n        }\r\n        break;\r\n      }\r\n      case \"if\":\r\n        if (!asBoo(stack.pop()!)) {\r\n          i += ins.value;\r\n        }\r\n        break;\r\n      case \"jmp\":\r\n      case \"cat\":\r\n        i += ins.value;\r\n        break;\r\n      case \"loo\":\r\n        i += ins.value;\r\n        --ctx.loopBudget;\r\n        break;\r\n      case \"pop\":\r\n        if (ins.value === 1) {\r\n          stack.pop();\r\n        } else {\r\n          splice(stack, len(stack) - ins.value, ins.value);\r\n        }\r\n        break;\r\n      case \"ret\":\r\n        if (ins.value) {\r\n          splice(stack, stackLen, len(stack) - stackLen - 1);\r\n        } else {\r\n          _nul();\r\n        }\r\n        i = lim;\r\n        break;\r\n      case \"clo\": {\r\n        //Ensure any in-scope declarations are captured here\r\n        const derefIns = slice(ins.value.derefs).map(ins => {\r\n          const decl =\r\n            ins.typ === \"val\" &&\r\n            ins.value.t === \"str\" &&\r\n            (lets[ins.value.v] ?? ctx.env.vars[ins.value.v]);\r\n          return decl ? <Ins>{ typ: \"val\", value: decl } : ins;\r\n        });\r\n        //Dereference closure captures\r\n        const errors = exeFunc(ctx, { ins: derefIns }, args, true);\r\n        if (errors) {\r\n          return errors;\r\n        }\r\n        //Enclose the closure with dereferenced values\r\n        const numIns = len(derefIns);\r\n        const captures = splice(stack, len(stack) - numIns, numIns);\r\n        const cins = slice(func.ins, i + 1, i + 1 + ins.value.length);\r\n        stack.push({ t: \"clo\", v: makeEnclosure(ins.value, cins, captures) });\r\n        i += ins.value.length;\r\n        break;\r\n      }\r\n      default:\r\n        assertUnreachable(ins);\r\n    }\r\n  }\r\n  if (!inClosure) {\r\n    letsStack.pop();\r\n    lets = letsStack[len(letsStack) - 1];\r\n    splice(stack, stackLen, len(stack) - (stackLen + 1));\r\n  }\r\n  return;\r\n}\r\n\r\nfunction parseAndExe(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n): InvokeError[] | undefined {\r\n  const parsed = parse(code, invokeId);\r\n  if (len(parsed.errors)) {\r\n    return parsed.errors;\r\n  }\r\n  ctx.env.funcs = { ...ctx.env.funcs, ...parsed.funcs };\r\n  if (!(\"entry\" in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return exeFunc(ctx, ctx.env.funcs[\"entry\"], []);\r\n}\r\n\r\nfunction ingestExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name, definition, handler }) => {\r\n    if (ops[name] && !externalOps[name]) {\r\n      throw \"Redefining internal operations is disallowed.\";\r\n    }\r\n    ops[name] = { ...definition, external: true };\r\n    externalOps[name] = handler;\r\n  });\r\n}\r\n\r\nfunction removeExternalOperations(functions: ExternalFunction[]) {\r\n  functions.forEach(({ name }) => {\r\n    delete ops[name];\r\n    delete externalOps[name];\r\n  });\r\n}\r\n\r\nfunction innerInvoke(\r\n  ctx: Ctx,\r\n  closure: () => InvokeError[] | undefined,\r\n  printResult: boolean,\r\n): InvokeResult {\r\n  const { callBudget, loopBudget, recurBudget, rangeBudget } = ctx;\r\n  ingestExternalOperations(ctx.functions);\r\n  const errors = closure();\r\n  removeExternalOperations(ctx.functions);\r\n  [ctx.callBudget, ctx.recurBudget] = [callBudget, recurBudget];\r\n  [ctx.loopBudget, ctx.rangeBudget] = [loopBudget, rangeBudget];\r\n  delete ctx.env.funcs[\"entry\"];\r\n  const value = stack.pop();\r\n  [stack, letsStack] = [[], []];\r\n  if (printResult && !errors && value) {\r\n    ctx.print(val2str(value), true);\r\n  }\r\n  return errors\r\n    ? { kind: \"errors\", errors }\r\n    : value\r\n    ? { kind: \"val\", value }\r\n    : { kind: \"empty\" };\r\n}\r\n\r\n/**\r\n * Parses and executes the given code.\r\n * @param ctx An environment context you retain.\r\n * @param code The code to parse and execute.\r\n * @param invokeId A unique ID referenced in invocation errors.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the code,\r\n * or the final value of the invocation.\r\n */\r\nexport function invoke(\r\n  ctx: Ctx,\r\n  code: string,\r\n  invokeId: string,\r\n  printResult = false,\r\n): InvokeResult {\r\n  return innerInvoke(ctx, () => parseAndExe(ctx, code, invokeId), printResult);\r\n}\r\n\r\n/**\r\n * Executes a user-defined Insitux function by name.\r\n * @param ctx An environment context you retain.\r\n * @param funcName The function to execute.\r\n * @param params The parameters to pass to the function.\r\n * @param printResult Automatically print the final value of this invocation?\r\n * @returns Invocation errors caused during execution of the function,\r\n * or the final value of the invocation,\r\n * or undefined if the function was not found.\r\n */\r\nexport function invokeFunction(\r\n  ctx: Ctx,\r\n  funcName: string,\r\n  params: Val[],\r\n  printResult = false,\r\n): InvokeResult | undefined {\r\n  if (!(funcName in ctx.env.funcs)) {\r\n    return;\r\n  }\r\n  return innerInvoke(\r\n    ctx,\r\n    () => exeFunc(ctx, ctx.env.funcs[funcName], params),\r\n    printResult,\r\n  );\r\n}\r\n\r\n/**\r\n * @param ctx An environment context you retain.\r\n * @param alsoSyntax To optionally include syntax symbols.\r\n * @returns List of symbols defined in Insitux, including built-in operations,\r\n * (optionally) syntax, constants, and user-defined functions.\r\n */\r\nexport function symbols(ctx: Ctx, alsoSyntax = true): string[] {\r\n  let syms: string[] = [];\r\n  if (alsoSyntax) {\r\n    push(syms, syntaxes);\r\n  }\r\n  push(syms, [\"args\", \"PI\", \"E\"]);\r\n  syms = concat(syms, objKeys(ops));\r\n  syms = concat(syms, objKeys(ctx.env.funcs));\r\n  syms = concat(syms, objKeys(ctx.env.vars));\r\n  const hidden = [\"entry\"];\r\n  syms = syms.filter(o => !has(hidden, o));\r\n  return sortBy(syms, (a, b) => (a > b ? 1 : -1));\r\n}\r\n","import { invoke, invokeFunction } from \".\";\r\nimport { padEnd, slen, starts, substr, trimStart } from \"./poly-fills\";\r\nimport { getTimeMs } from \"./poly-fills\";\r\nimport { Ctx, InvokeResult, Val } from \"./types\";\r\n\r\nexport type InvokeOutput = {\r\n  type: \"message\" | \"error\";\r\n  text: string;\r\n}[];\r\n\r\nconst invocations = new Map<string, string>();\r\nexport const parensRx = /[\\[\\]\\(\\) ,]/;\r\n\r\nexport function invoker(\r\n  ctx: Ctx,\r\n  code: string,\r\n  id?: string,\r\n  printResult = true,\r\n): InvokeOutput {\r\n  id = id ? `-${id}` : `${getTimeMs()}`;\r\n  invocations.set(id, code);\r\n  const valOrErrs = invoke(ctx, code, id, printResult);\r\n  return valOrErrsOutput(valOrErrs);\r\n}\r\n\r\nexport function functionInvoker(\r\n  ctx: Ctx,\r\n  name: string,\r\n  params: Val[],\r\n  printResult = true,\r\n): InvokeOutput {\r\n  const valOrErrs = invokeFunction(ctx, name, params, printResult);\r\n  if (!valOrErrs) {\r\n    return [\r\n      { type: \"message\", text: `Invoke Error: function '${name}' not found.` },\r\n    ];\r\n  }\r\n  return valOrErrsOutput(valOrErrs);\r\n}\r\n\r\nfunction valOrErrsOutput(valOrErrs: InvokeResult) {\r\n  if (valOrErrs.kind !== \"errors\") {\r\n    return [];\r\n  }\r\n  let out: InvokeOutput = [];\r\n  const msg = (text: string) => out.push({ type: \"message\", text });\r\n  const err = (text: string) => out.push({ type: \"error\", text });\r\n  valOrErrs.errors.forEach(({ e, m, errCtx: { line, col, invokeId } }) => {\r\n    const invocation = invocations.get(invokeId);\r\n    if (!invocation) {\r\n      msg(`${e} Error: ${invokeId} line ${line} col ${col}: ${m}\\n`);\r\n      return;\r\n    }\r\n    const lineText = invocation.split(\"\\n\")[line - 1];\r\n    const sym = substr(lineText, col - 1).split(parensRx)[0];\r\n    const half1 = trimStart(substr(lineText, 0, col - 1));\r\n    const id = starts(invokeId, \"-\") ? `${substr(invokeId, 1)} ` : \"\";\r\n    msg(`${id}${padEnd(`${line}`, 4)} ${half1}`);\r\n    if (!sym) {\r\n      const half2 = substr(lineText, col);\r\n      err(lineText[col - 1]);\r\n      msg(`${half2}\\n`);\r\n    } else {\r\n      const half2 = substr(lineText, col - 1 + slen(sym));\r\n      err(sym);\r\n      msg(`${half2}\\n`);\r\n    }\r\n    msg(`${e} Error: ${m}.\\n`);\r\n  });\r\n  return out;\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"process\");","import readline = require(\"readline\");\r\nimport { appendFileSync, existsSync, readFileSync, writeFileSync } from \"fs\";\r\nimport { symbols } from \".\";\r\nimport { Ctx, defaultCtx, Val, ValOrErr } from \"./types\";\r\nimport { ExternalFunction, Operation } from \"./types\";\r\nimport { InvokeOutput, invoker, parensRx } from \"./invoker\";\r\nimport { tokenise } from \"./parse\";\r\nimport prompt = require(\"prompt-sync\");\r\nimport { exit } from \"process\";\r\n\r\nconst nullVal: ValOrErr = { kind: \"val\", value: { t: \"null\", v: undefined } };\r\n\r\n//#region External operations\r\nfunction read(path: string, asLines: boolean) {\r\n  if (!existsSync(path)) {\r\n    return nullVal;\r\n  }\r\n  const content = readFileSync(path).toString();\r\n  const str = (v: string) => <Val>{ t: \"str\", v };\r\n  return <ValOrErr>{\r\n    kind: \"val\",\r\n    value: asLines\r\n      ? { t: \"vec\", v: content.split(/\\r?\\n/).map(str) }\r\n      : str(content),\r\n  };\r\n}\r\n\r\nfunction writeOrAppend(path: string, content: string, isAppend = false) {\r\n  (isAppend ? appendFileSync : writeFileSync)(path, content);\r\n  return nullVal;\r\n}\r\n\r\nconst writingOpDef: Operation = {\r\n  exactArity: 2,\r\n  params: [\"str\", \"str\"],\r\n  returns: [\"str\"],\r\n};\r\n\r\nconst functions: ExternalFunction[] = [\r\n  {\r\n    name: \"read\",\r\n    definition: { exactArity: 1, params: [\"str\"], returns: [\"str\"] },\r\n    handler: params => read(<string>params[0].v, false),\r\n  },\r\n  {\r\n    name: \"read-lines\",\r\n    definition: { exactArity: 1, params: [\"str\"], returns: [\"vec\"] },\r\n    handler: params => read(<string>params[0].v, true),\r\n  },\r\n  {\r\n    name: \"write\",\r\n    definition: writingOpDef,\r\n    handler: params => writeOrAppend(<string>params[0].v, <string>params[1].v),\r\n  },\r\n  {\r\n    name: \"file-append\",\r\n    definition: writingOpDef,\r\n    handler: params =>\r\n      writeOrAppend(<string>params[0].v, <string>params[1].v, true),\r\n  },\r\n  {\r\n    name: \"prompt\",\r\n    definition: {\r\n      exactArity: 1,\r\n      params: [\"str\"],\r\n      returns: [\"str\"],\r\n    },\r\n    handler: params => ({\r\n      kind: \"val\",\r\n      value: { t: \"str\", v: prompt()(<string>params[0].v) },\r\n    }),\r\n  },\r\n];\r\n//#endregion\r\n\r\n//#region Context\r\nconst env = new Map<string, Val>();\r\n\r\nfunction get(key: string): ValOrErr {\r\n  return env.has(key)\r\n    ? { kind: \"val\", value: env.get(key)! }\r\n    : { kind: \"err\", err: `key ${key} not found` };\r\n}\r\n\r\nfunction set(key: string, val: Val) {\r\n  env.set(key, val);\r\n  return undefined;\r\n}\r\n\r\nconst ctx: Ctx = {\r\n  ...defaultCtx,\r\n  get,\r\n  set,\r\n  functions,\r\n  print(str, withNewLine) {\r\n    process.stdout.write(`\\x1b[32m${str}\\x1b[0m${withNewLine ? \"\\n\" : \"\"}`);\r\n  },\r\n  exe,\r\n};\r\n\r\nfunction exe(name: string, args: Val[]): ValOrErr {\r\n  if (args.length) {\r\n    const a = args[0];\r\n    if (a.t === \"str\" && a.v.startsWith(\"$\")) {\r\n      if (args.length === 1) {\r\n        return get(`${a.v.substring(1)}.${name}`);\r\n      } else {\r\n        set(`${a.v.substring(1)}.${name}`, args[1]);\r\n        return { kind: \"val\", value: args[1] };\r\n      }\r\n    }\r\n  }\r\n  return { kind: \"err\", err: `operation \"${name}\" does not exist` };\r\n}\r\n//#endregion\r\n\r\n//#region REPL IO\r\nif (process.argv.length > 2) {\r\n  let [x, y, ...args] = process.argv;\r\n  const paths = args.filter(a => !a.startsWith(\"-\"));\r\n  const switches = args.filter(a => a.startsWith(\"-\"));\r\n  paths.filter(existsSync).forEach(path => {\r\n    const code = readFileSync(path).toString();\r\n    printErrorOutput(invoker(ctx, code, path));\r\n  });\r\n  if (!switches.includes(\"-r\")) {\r\n    exit();\r\n  }\r\n}\r\nprintErrorOutput(invoker(ctx, `(str \"Insitux \" (version) \" REPL\")`));\r\nif (existsSync(\".repl.ix\")) {\r\n  printErrorOutput(invoker(ctx, readFileSync(\".repl.ix\").toString()));\r\n}\r\n\r\nconst rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n  prompt: \"❯ \",\r\n  completer,\r\n  history: existsSync(\".repl-history.txt\")\r\n    ? readFileSync(\".repl-history.txt\").toString().split(\"\\n\").reverse()\r\n    : [],\r\n});\r\n\r\nrl.on(\"line\", line => {\r\n  lines.push(line);\r\n  const input = lines.join(\"\\n\");\r\n  if (isFinished(input)) {\r\n    if (lines.length === 1) {\r\n      appendFileSync(\".repl-history.txt\", `\\n${input}`);\r\n    }\r\n    lines = [];\r\n    if (input === \"quit\") {\r\n      rl.close();\r\n      return;\r\n    }\r\n    if (input.trim()) {\r\n      printErrorOutput(invoker(ctx, input));\r\n    }\r\n    rl.setPrompt(\"❯ \");\r\n  } else {\r\n    rl.setPrompt(\"• \");\r\n  }\r\n  rl.prompt();\r\n});\r\n\r\nrl.on(\"close\", () => {\r\n  console.log();\r\n});\r\n\r\nrl.prompt();\r\n\r\nfunction completer(line: string) {\r\n  const input = line.split(parensRx).pop();\r\n  const completions = symbols(ctx);\r\n  if (!input) {\r\n    return [completions, \"\"];\r\n  }\r\n  const hits = completions.filter(c => c.startsWith(input));\r\n  return [hits.length ? hits : completions, input];\r\n}\r\n\r\nlet lines: string[] = [];\r\n\r\nfunction isFinished(code: string): boolean {\r\n  const { tokens } = tokenise(code, \"\");\r\n  const numL = tokens.filter(t => t.typ === \"(\").length;\r\n  const numR = tokens.filter(t => t.typ === \")\").length;\r\n  return numL <= numR;\r\n}\r\n\r\nfunction printErrorOutput(lines: InvokeOutput) {\r\n  const colours = { error: 31, message: 35 };\r\n  lines.forEach(({ type, text }) => {\r\n    process.stdout.write(`\\x1b[${colours[type]}m${text}\\x1b[0m`);\r\n  });\r\n}\r\n//#endregion\r\n"],"names":[],"sourceRoot":""}